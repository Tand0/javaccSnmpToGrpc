package jp.ne.ruru.park.ando.snmpviewer.tree;


/* AsnParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. AsnParser.java */
/**
 *
 *  ASN.1 grammar  for JavaCC
 *
 *  Contributed by Helena Sarin (hsarin@lucent.com)
 *  Contributed by Toshikazu Ando (foobar.em.boo.jp)
 *
 *  Derived in part from the following work: snacc - a freeware ASN.1 to C or C++ compiler, v 1.3,
 *  yacc/lex source code ( parse-asn1.y, lex-asn1.l), 
 *  the free software, which is covered by GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or later
 */
public class AsnParser/*@bgen(jjtree)*/implements AsnParserTreeConstants, AsnParserConstants {/*@bgen(jjtree)*/
  protected JJTAsnParserState jjtree = new JJTAsnParserState();

  final public ASTInput Input() throws ParseException {/*@bgen(jjtree) Input */
  ASTInput jjtn000 = new ASTInput(JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UCASEFIRST_IDENT_TKN:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        ModuleDefinition();
      }
jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ModuleDefinition() throws ParseException {/*@bgen(jjtree) ModuleDefinition */
  ASTModuleDefinition jjtn000 = new ASTModuleDefinition(JJTMODULEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ModuleIdentifier();
      jj_consume_token(DEFINITIONS_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXPLICIT_TKN:
      case IMPLICIT_TKN:{
        TagDefault();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(GETS_TKN);
      jj_consume_token(BEGIN_TKN);
      ModuleBody();
      jj_consume_token(END_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TagDefault() throws ParseException {/*@bgen(jjtree) TagDefault */
  ASTTagDefault jjtn000 = new ASTTagDefault(JJTTAGDEFAULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXPLICIT_TKN:{
        jj_consume_token(EXPLICIT_TKN);
        break;
        }
      case IMPLICIT_TKN:{
        jj_consume_token(IMPLICIT_TKN);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(TAGS_TKN);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ModuleIdentifier() throws ParseException {/*@bgen(jjtree) ModuleIdentifier */
  ASTModuleIdentifier jjtn000 = new ASTModuleIdentifier(JJTMODULEIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      modulereference();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTBRACE_TKN:{
        AssignedIdentifier();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AssignedIdentifier() throws ParseException {/*@bgen(jjtree) AssignedIdentifier */
  ASTAssignedIdentifier jjtn000 = new ASTAssignedIdentifier(JJTASSIGNEDIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ObjectIdentifierValue();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ModuleBody() throws ParseException {/*@bgen(jjtree) ModuleBody */
  ASTModuleBody jjtn000 = new ASTModuleBody(JJTMODULEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXPORTS_TKN:{
        Exports();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORTS_TKN:{
        Imports();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TC_TKN:
      case MI_TKN:
      case NT_TKN:
      case NG_TKN:
      case MC_TKN:
      case OG_TKN:
      case OI_TKN:
      case TT_TKN:
      case AC_TKN:
      case OBJECTTYPE_TKN:
      case IMPLIED_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:{
        AssignmentList();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Exports() throws ParseException {/*@bgen(jjtree) Exports */
  ASTExports jjtn000 = new ASTExports(JJTEXPORTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EXPORTS_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TC_TKN:
      case MI_TKN:
      case NT_TKN:
      case NG_TKN:
      case MC_TKN:
      case OG_TKN:
      case OI_TKN:
      case TT_TKN:
      case AC_TKN:
      case OBJECTTYPE_TKN:
      case IMPLIED_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:{
        SymbolsExported();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(SEMI_COLON_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SymbolsExported() throws ParseException {/*@bgen(jjtree) SymbolsExported */
  ASTSymbolsExported jjtn000 = new ASTSymbolsExported(JJTSYMBOLSEXPORTED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExportSymbolList();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ExportSymbolList() throws ParseException {/*@bgen(jjtree) ExportSymbolList */
  ASTExportSymbolList jjtn000 = new ASTExportSymbolList(JJTEXPORTSYMBOLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Symbol();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA_TKN:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA_TKN);
        Symbol();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Imports() throws ParseException {/*@bgen(jjtree) Imports */
  ASTImports jjtn000 = new ASTImports(JJTIMPORTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IMPORTS_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TC_TKN:
      case MI_TKN:
      case NT_TKN:
      case NG_TKN:
      case MC_TKN:
      case OG_TKN:
      case OI_TKN:
      case TT_TKN:
      case AC_TKN:
      case OBJECTTYPE_TKN:
      case IMPLIED_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:{
        SymbolsImported();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(SEMI_COLON_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SymbolsImported() throws ParseException {/*@bgen(jjtree) SymbolsImported */
  ASTSymbolsImported jjtn000 = new ASTSymbolsImported(JJTSYMBOLSIMPORTED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SymbolsFromModuleList();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SymbolsFromModuleList() throws ParseException {/*@bgen(jjtree) SymbolsFromModuleList */
  ASTSymbolsFromModuleList jjtn000 = new ASTSymbolsFromModuleList(JJTSYMBOLSFROMMODULELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SymbolsFromModule();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TC_TKN:
        case MI_TKN:
        case NT_TKN:
        case NG_TKN:
        case MC_TKN:
        case OG_TKN:
        case OI_TKN:
        case TT_TKN:
        case AC_TKN:
        case OBJECTTYPE_TKN:
        case IMPLIED_TKN:
        case LCASEFIRST_IDENT_TKN:
        case UCASEFIRST_IDENT_TKN:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_3;
        }
        SymbolsFromModule();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SymbolsFromModule() throws ParseException {/*@bgen(jjtree) SymbolsFromModule */
                             ASTSymbolsFromModule jjtn000 = new ASTSymbolsFromModule(JJTSYMBOLSFROMMODULE);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);String module;
    try {
      SymbolList();
      jj_consume_token(FROM_TKN);
      ModuleIdentifier();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SymbolList() throws ParseException {/*@bgen(jjtree) SymbolList */
  ASTSymbolList jjtn000 = new ASTSymbolList(JJTSYMBOLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Symbol();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA_TKN:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA_TKN);
        Symbol();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Symbol() throws ParseException {/*@bgen(jjtree) Symbol */
  ASTSymbol jjtn000 = new ASTSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UCASEFIRST_IDENT_TKN:{
        typereference();
        break;
        }
      case IMPLIED_TKN:
      case LCASEFIRST_IDENT_TKN:{
        identifier();
        break;
        }
      case TC_TKN:
      case MI_TKN:
      case NT_TKN:
      case NG_TKN:
      case MC_TKN:
      case OG_TKN:
      case OI_TKN:
      case TT_TKN:
      case AC_TKN:
      case OBJECTTYPE_TKN:{
        DefinedMacroName();
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void AssignmentList() throws ParseException {/*@bgen(jjtree) AssignmentList */
  ASTAssignmentList jjtn000 = new ASTAssignmentList(JJTASSIGNMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Assignment();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMI_COLON_TKN:{
        jj_consume_token(SEMI_COLON_TKN);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TC_TKN:
        case MI_TKN:
        case NT_TKN:
        case NG_TKN:
        case MC_TKN:
        case OG_TKN:
        case OI_TKN:
        case TT_TKN:
        case AC_TKN:
        case OBJECTTYPE_TKN:
        case IMPLIED_TKN:
        case LCASEFIRST_IDENT_TKN:
        case UCASEFIRST_IDENT_TKN:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_5;
        }
        Assignment();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SEMI_COLON_TKN:{
          jj_consume_token(SEMI_COLON_TKN);
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Assignment() throws ParseException {/*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(2)) {
        MacroDefinition();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UCASEFIRST_IDENT_TKN:{
          TypeAssignment();
          break;
          }
        case IMPLIED_TKN:
        case LCASEFIRST_IDENT_TKN:{
          ValueAssignment();
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void MacroDefinition() throws ParseException {/*@bgen(jjtree) MacroDefinition */
  ASTMacroDefinition jjtn000 = new ASTMacroDefinition(JJTMACRODEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TC_TKN:
      case MI_TKN:
      case NT_TKN:
      case NG_TKN:
      case MC_TKN:
      case OG_TKN:
      case OI_TKN:
      case TT_TKN:
      case AC_TKN:
      case OBJECTTYPE_TKN:{
        DefinedMacroName();
        break;
        }
      case UCASEFIRST_IDENT_TKN:{
        typereference();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(MACRO_TKN);
      jj_consume_token(GETS_TKN);
      jj_consume_token(BEGIN_TKN);
      MacroBody();
      jj_consume_token(END_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  void MacroBody() throws ParseException {/*@bgen(jjtree) MacroBody */
 ASTMacroBody jjtn000 = new ASTMacroBody(JJTMACROBODY);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {Token tok;
    int nesting = 1;
    while (true) {
        tok = getToken(1);
        if (tok.kind == END_TKN) {
            break;
        }
        tok = getNextToken();
    }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
  }

  final public void MacroReference() throws ParseException {/*@bgen(jjtree) MacroReference */
  ASTMacroReference jjtn000 = new ASTMacroReference(JJTMACROREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UCASEFIRST_IDENT_TKN:{
        typereference();
        break;
        }
      case TC_TKN:
      case MI_TKN:
      case NT_TKN:
      case NG_TKN:
      case MC_TKN:
      case OG_TKN:
      case OI_TKN:
      case TT_TKN:
      case AC_TKN:
      case OBJECTTYPE_TKN:{
        DefinedMacroName();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void TypeAssignment() throws ParseException {/*@bgen(jjtree) TypeAssignment */
  ASTTypeAssignment jjtn000 = new ASTTypeAssignment(JJTTYPEASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      typereference();
      jj_consume_token(GETS_TKN);
      GlobalType();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Type() throws ParseException {/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_2(2)) {
        BuiltinType();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UCASEFIRST_IDENT_TKN:{
          DefinedType();
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_3(2)) {
        SubtypeSpec();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void GlobalType() throws ParseException {/*@bgen(jjtree) GlobalType */
  ASTGlobalType jjtn000 = new ASTGlobalType(JJTGLOBALTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OBJECT_IDENTIFIER_TKN:
      case LEFTBRACKET_TKN:
      case ANY_TKN:
      case BIT_TKN:
      case BOOLEAN_TKN:
      case CHOICE_TKN:
      case ENUMERATED_TKN:
      case EXTERNAL_TKN:
      case IMPLIED_TKN:
      case INTEGER_TKN:
      case NULL_TKN:
      case OCTET_TKN:
      case REAL_TKN:
      case SEQUENCE_TKN:
      case SET_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:{
        Type();
        break;
        }
      case TC_TKN:{
        TextualConventionMacroType();
        break;
        }
      case MI_TKN:{
        ModuleIdentityMacroType();
        break;
        }
      case NT_TKN:{
        NotificationTypeMacroType();
        break;
        }
      case NG_TKN:{
        NotificationGroupMacroType();
        break;
        }
      case MC_TKN:{
        ModuleComplianceMacroType();
        break;
        }
      case OG_TKN:{
        ObjecGroupMacroType();
        break;
        }
      case OI_TKN:{
        ObjecIdentityMacroType();
        break;
        }
      case TT_TKN:{
        TrapTypeMacroType();
        break;
        }
      case AC_TKN:{
        AgentCapabilitiesMacroType();
        break;
        }
      case OBJECTTYPE_TKN:{
        ObjectTypeMacroType();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
  }

  final public void DefinedMacroName() throws ParseException {/*@bgen(jjtree) DefinedMacroName */
  ASTDefinedMacroName jjtn000 = new ASTDefinedMacroName(JJTDEFINEDMACRONAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TC_TKN:{
        jj_consume_token(TC_TKN);
        break;
        }
      case MI_TKN:{
        jj_consume_token(MI_TKN);
        break;
        }
      case NT_TKN:{
        jj_consume_token(NT_TKN);
        break;
        }
      case NG_TKN:{
        jj_consume_token(NG_TKN);
        break;
        }
      case MC_TKN:{
        jj_consume_token(MC_TKN);
        break;
        }
      case OG_TKN:{
        jj_consume_token(OG_TKN);
        break;
        }
      case OI_TKN:{
        jj_consume_token(OI_TKN);
        break;
        }
      case TT_TKN:{
        jj_consume_token(TT_TKN);
        break;
        }
      case AC_TKN:{
        jj_consume_token(AC_TKN);
        break;
        }
      case OBJECTTYPE_TKN:{
        jj_consume_token(OBJECTTYPE_TKN);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  final public void DefinedType() throws ParseException {/*@bgen(jjtree) DefinedType */
  ASTDefinedType jjtn000 = new ASTDefinedType(JJTDEFINEDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_4(2)) {
        modulereference();
        jj_consume_token(DOT_TKN);
      } else {
        ;
      }
      typereference();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTBRACE_TKN:{
        jj_consume_token(LEFTBRACE_TKN);
        NamedNumberList();
        jj_consume_token(RIGHTBRACE_TKN);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BuiltinType() throws ParseException {/*@bgen(jjtree) BuiltinType */
  ASTBuiltinType jjtn000 = new ASTBuiltinType(JJTBUILTINTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_TKN:{
        IntegerType();
        break;
        }
      case BIT_TKN:{
        BitStringType();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        if (jj_2_5(2)) {
          SetOrSequenceType();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SEQUENCE_TKN:
          case SET_TKN:{
            SetOrSequenceOfType();
            break;
            }
          case CHOICE_TKN:{
            ChoiceType();
            break;
            }
          case IMPLIED_TKN:
          case LCASEFIRST_IDENT_TKN:{
            SelectionType();
            break;
            }
          case LEFTBRACKET_TKN:{
            TaggedType();
            break;
            }
          case ANY_TKN:{
            AnyType();
            break;
            }
          case ENUMERATED_TKN:{
            EnumeratedType();
            break;
            }
          case OCTET_TKN:{
            OctetStringType();
            break;
            }
          case OBJECT_IDENTIFIER_TKN:{
            ObjectIdentiferType();
            break;
            }
          case REAL_TKN:{
            RealType();
            break;
            }
          case BOOLEAN_TKN:{
            BooleanType();
            break;
            }
          case NULL_TKN:{
            NullType();
            break;
            }
          case EXTERNAL_TKN:{
            ExternalType();
            break;
            }
          default:
            jj_la1[24] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void OctetStringType() throws ParseException {/*@bgen(jjtree) OctetStringType */
  ASTOctetStringType jjtn000 = new ASTOctetStringType(JJTOCTETSTRINGTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OCTET_TKN);
      jj_consume_token(STRING_TKN);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ObjectIdentiferType() throws ParseException {/*@bgen(jjtree) ObjectIdentiferType */
  ASTObjectIdentiferType jjtn000 = new ASTObjectIdentiferType(JJTOBJECTIDENTIFERTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OBJECT_IDENTIFIER_TKN);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void RealType() throws ParseException {/*@bgen(jjtree) RealType */
  ASTRealType jjtn000 = new ASTRealType(JJTREALTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REAL_TKN);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BooleanType() throws ParseException {/*@bgen(jjtree) BooleanType */
  ASTBooleanType jjtn000 = new ASTBooleanType(JJTBOOLEANTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BOOLEAN_TKN);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NullType() throws ParseException {/*@bgen(jjtree) NullType */
  ASTNullType jjtn000 = new ASTNullType(JJTNULLTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NULL_TKN);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ExternalType() throws ParseException {/*@bgen(jjtree) ExternalType */
  ASTExternalType jjtn000 = new ASTExternalType(JJTEXTERNALTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EXTERNAL_TKN);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void EnumeratedType() throws ParseException {/*@bgen(jjtree) EnumeratedType */
  ASTEnumeratedType jjtn000 = new ASTEnumeratedType(JJTENUMERATEDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ENUMERATED_TKN);
      jj_consume_token(LEFTBRACE_TKN);
      NamedNumberList();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void IntegerType() throws ParseException {/*@bgen(jjtree) IntegerType */
  ASTIntegerType jjtn000 = new ASTIntegerType(JJTINTEGERTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INTEGER_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTBRACE_TKN:{
        jj_consume_token(LEFTBRACE_TKN);
        NamedNumberList();
        jj_consume_token(RIGHTBRACE_TKN);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void BitStringType() throws ParseException {/*@bgen(jjtree) BitStringType */
  ASTBitStringType jjtn000 = new ASTBitStringType(JJTBITSTRINGTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BIT_TKN);
      jj_consume_token(STRING_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTBRACE_TKN:{
        jj_consume_token(LEFTBRACE_TKN);
        NamedNumberList();
        jj_consume_token(RIGHTBRACE_TKN);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SetOrSequenceOfType() throws ParseException {/*@bgen(jjtree) SetOrSequenceOfType */
  ASTSetOrSequenceOfType jjtn000 = new ASTSetOrSequenceOfType(JJTSETORSEQUENCEOFTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SET_TKN:{
        jj_consume_token(SET_TKN);
        break;
        }
      case SEQUENCE_TKN:{
        jj_consume_token(SEQUENCE_TKN);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTPAREN_TKN:
      case SIZE_TKN:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LEFTPAREN_TKN:{
          jj_consume_token(LEFTPAREN_TKN);
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          ;
        }
        SizeConstraint();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RIGHTPAREN_TKN:{
          jj_consume_token(RIGHTPAREN_TKN);
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(OF_TKN);
      Type();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ChoiceType() throws ParseException {/*@bgen(jjtree) ChoiceType */
  ASTChoiceType jjtn000 = new ASTChoiceType(JJTCHOICETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CHOICE_TKN);
      jj_consume_token(LEFTBRACE_TKN);
      ElementTypeList();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SetOrSequenceType() throws ParseException {/*@bgen(jjtree) SetOrSequenceType */
  ASTSetOrSequenceType jjtn000 = new ASTSetOrSequenceType(JJTSETORSEQUENCETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SET_TKN:{
        jj_consume_token(SET_TKN);
        break;
        }
      case SEQUENCE_TKN:{
        jj_consume_token(SEQUENCE_TKN);
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LEFTBRACE_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OBJECT_IDENTIFIER_TKN:
      case LEFTBRACKET_TKN:
      case ANY_TKN:
      case BIT_TKN:
      case BOOLEAN_TKN:
      case CHOICE_TKN:
      case COMPONENTS_TKN:
      case ENUMERATED_TKN:
      case EXTERNAL_TKN:
      case IMPLIED_TKN:
      case INTEGER_TKN:
      case NULL_TKN:
      case OCTET_TKN:
      case REAL_TKN:
      case SEQUENCE_TKN:
      case SET_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:{
        ElementTypeList();
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SelectionType() throws ParseException {/*@bgen(jjtree) SelectionType */
  ASTSelectionType jjtn000 = new ASTSelectionType(JJTSELECTIONTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      jj_consume_token(LESSTHAN_TKN);
      Type();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void TaggedType() throws ParseException {/*@bgen(jjtree) TaggedType */
  ASTTaggedType jjtn000 = new ASTTaggedType(JJTTAGGEDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Tag();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXPLICIT_TKN:
      case IMPLICIT_TKN:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EXPLICIT_TKN:{
          jj_consume_token(EXPLICIT_TKN);
          break;
          }
        case IMPLICIT_TKN:{
          jj_consume_token(IMPLICIT_TKN);
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      Type();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Tag() throws ParseException {/*@bgen(jjtree) Tag */
  ASTTag jjtn000 = new ASTTag(JJTTAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTBRACKET_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case APPLICATION_TKN:
      case PRIVATE_TKN:
      case UNIVERSAL_TKN:{
        Class();
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      ClassNumber();
      jj_consume_token(RIGHTBRACKET_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void AnyType() throws ParseException {/*@bgen(jjtree) AnyType */
  ASTAnyType jjtn000 = new ASTAnyType(JJTANYTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ANY_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEFINED_TKN:{
        jj_consume_token(DEFINED_TKN);
        jj_consume_token(BY_TKN);
        identifier();
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NamedNumberList() throws ParseException {/*@bgen(jjtree) NamedNumberList */
  ASTNamedNumberList jjtn000 = new ASTNamedNumberList(JJTNAMEDNUMBERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      NamedNumber();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA_TKN:{
          ;
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA_TKN);
        NamedNumber();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NamedNumber() throws ParseException {/*@bgen(jjtree) NamedNumber */
  ASTNamedNumber jjtn000 = new ASTNamedNumber(JJTNAMEDNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      jj_consume_token(LEFTPAREN_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS_NUMBER_TKN:
      case MINUS_NUMBER_TKN:{
        SignedNumber();
        break;
        }
      case IMPLIED_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:{
        DefinedValue();
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RIGHTPAREN_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SignedNumber() throws ParseException {/*@bgen(jjtree) SignedNumber */
    ASTSignedNumber jjtn000 = new ASTSignedNumber(JJTSIGNEDNUMBER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS_NUMBER_TKN:{
        t = jj_consume_token(PLUS_NUMBER_TKN);
jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
jjtn000.value = t;
        break;
        }
      case MINUS_NUMBER_TKN:{
        t = jj_consume_token(MINUS_NUMBER_TKN);
jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
jjtn000.value = t;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  final public void ElementTypeList() throws ParseException {/*@bgen(jjtree) ElementTypeList */
  ASTElementTypeList jjtn000 = new ASTElementTypeList(JJTELEMENTTYPELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ElementType();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA_TKN:{
          ;
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA_TKN);
        ElementType();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ElementType() throws ParseException {/*@bgen(jjtree) ElementType */
  ASTElementType jjtn000 = new ASTElementType(JJTELEMENTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OBJECT_IDENTIFIER_TKN:
      case LEFTBRACKET_TKN:
      case ANY_TKN:
      case BIT_TKN:
      case BOOLEAN_TKN:
      case CHOICE_TKN:
      case ENUMERATED_TKN:
      case EXTERNAL_TKN:
      case IMPLIED_TKN:
      case INTEGER_TKN:
      case NULL_TKN:
      case OCTET_TKN:
      case REAL_TKN:
      case SEQUENCE_TKN:
      case SET_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:{
        NamedType();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DEFAULT_TKN:
        case OPTIONAL_TKN:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OPTIONAL_TKN:{
            jj_consume_token(OPTIONAL_TKN);
            break;
            }
          case DEFAULT_TKN:{
            jj_consume_token(DEFAULT_TKN);
            NamedValue();
            break;
            }
          default:
            jj_la1[41] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          ;
        }
        break;
        }
      case COMPONENTS_TKN:{
        ComponentsType();
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ComponentsType() throws ParseException {/*@bgen(jjtree) ComponentsType */
  ASTComponentsType jjtn000 = new ASTComponentsType(JJTCOMPONENTSTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(COMPONENTS_TKN);
      jj_consume_token(OF_TKN);
      Type();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NamedType() throws ParseException {/*@bgen(jjtree) NamedType */
  ASTNamedType jjtn000 = new ASTNamedType(JJTNAMEDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_6(2)) {
        identifier();
      } else {
        ;
      }
      Type();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ClassNumber() throws ParseException {/*@bgen(jjtree) ClassNumber */
  ASTClassNumber jjtn000 = new ASTClassNumber(JJTCLASSNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS_NUMBER_TKN:{
        number();
        break;
        }
      case IMPLIED_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:{
        DefinedValue();
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Class() throws ParseException {/*@bgen(jjtree) Class */
  ASTClass jjtn000 = new ASTClass(JJTCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UNIVERSAL_TKN:{
        jj_consume_token(UNIVERSAL_TKN);
        break;
        }
      case APPLICATION_TKN:{
        jj_consume_token(APPLICATION_TKN);
        break;
        }
      case PRIVATE_TKN:{
        jj_consume_token(PRIVATE_TKN);
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SubtypeSpec() throws ParseException {/*@bgen(jjtree) SubtypeSpec */
  ASTSubtypeSpec jjtn000 = new ASTSubtypeSpec(JJTSUBTYPESPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTPAREN_TKN);
      SubtypeValueSetList();
      jj_consume_token(RIGHTPAREN_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SubtypeValueSetList() throws ParseException {/*@bgen(jjtree) SubtypeValueSetList */
  ASTSubtypeValueSetList jjtn000 = new ASTSubtypeValueSetList(JJTSUBTYPEVALUESETLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SubtypeValueSet();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BAR_TKN:{
          ;
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          break label_8;
        }
        jj_consume_token(BAR_TKN);
        SubtypeValueSet();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SubtypeValueSet() throws ParseException {/*@bgen(jjtree) SubtypeValueSet */
  ASTSubtypeValueSet jjtn000 = new ASTSubtypeValueSet(JJTSUBTYPEVALUESET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BSTRING_TKN:
      case HSTRING_TKN:
      case CSTRING_TKN:
      case PLUS_NUMBER_TKN:
      case MINUS_NUMBER_TKN:
      case LEFTBRACE_TKN:
      case FALSE_TKN:
      case IMPLIED_TKN:
      case MIN_TKN:
      case MINUS_INFINITY_TKN:
      case NULL_TKN:
      case PLUS_INFINITY_TKN:
      case TRUE_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:{
        ValueRange();
        break;
        }
      case INCLUDES_TKN:{
        ContainedSubtype();
        break;
        }
      case FROM_TKN:{
        PermittedAlphabet();
        break;
        }
      case SIZE_TKN:{
        SizeConstraint();
        break;
        }
      case WITH_TKN:{
        InnerTypeConstraints();
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void ContainedSubtype() throws ParseException {/*@bgen(jjtree) ContainedSubtype */
  ASTContainedSubtype jjtn000 = new ASTContainedSubtype(JJTCONTAINEDSUBTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INCLUDES_TKN);
      Type();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SingleValue() throws ParseException {/*@bgen(jjtree) SingleValue */
  ASTSingleValue jjtn000 = new ASTSingleValue(JJTSINGLEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Value();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ValueRange() throws ParseException {/*@bgen(jjtree) ValueRange */
  ASTValueRange jjtn000 = new ASTValueRange(JJTVALUERANGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BSTRING_TKN:
      case HSTRING_TKN:
      case CSTRING_TKN:
      case PLUS_NUMBER_TKN:
      case MINUS_NUMBER_TKN:
      case LEFTBRACE_TKN:
      case FALSE_TKN:
      case IMPLIED_TKN:
      case MINUS_INFINITY_TKN:
      case NULL_TKN:
      case PLUS_INFINITY_TKN:
      case TRUE_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:{
        Value();
        break;
        }
      case MIN_TKN:{
        jj_consume_token(MIN_TKN);
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT_TKN:
      case LESSTHAN_TKN:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LESSTHAN_TKN:{
          jj_consume_token(LESSTHAN_TKN);
          break;
          }
        default:
          jj_la1[49] = jj_gen;
          ;
        }
        jj_consume_token(DOT_TKN);
        jj_consume_token(DOT_TKN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LESSTHAN_TKN:{
          jj_consume_token(LESSTHAN_TKN);
          break;
          }
        default:
          jj_la1[50] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BSTRING_TKN:
        case HSTRING_TKN:
        case CSTRING_TKN:
        case PLUS_NUMBER_TKN:
        case MINUS_NUMBER_TKN:
        case LEFTBRACE_TKN:
        case FALSE_TKN:
        case IMPLIED_TKN:
        case MINUS_INFINITY_TKN:
        case NULL_TKN:
        case PLUS_INFINITY_TKN:
        case TRUE_TKN:
        case LCASEFIRST_IDENT_TKN:
        case UCASEFIRST_IDENT_TKN:{
          Value();
          break;
          }
        case MAX_TKN:{
          jj_consume_token(MAX_TKN);
          break;
          }
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void SizeConstraint() throws ParseException {/*@bgen(jjtree) SizeConstraint */
  ASTSizeConstraint jjtn000 = new ASTSizeConstraint(JJTSIZECONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SIZE_TKN);
      SubtypeSpec();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void PermittedAlphabet() throws ParseException {/*@bgen(jjtree) PermittedAlphabet */
  ASTPermittedAlphabet jjtn000 = new ASTPermittedAlphabet(JJTPERMITTEDALPHABET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FROM_TKN);
      SubtypeSpec();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void InnerTypeConstraints() throws ParseException {/*@bgen(jjtree) InnerTypeConstraints */
  ASTInnerTypeConstraints jjtn000 = new ASTInnerTypeConstraints(JJTINNERTYPECONSTRAINTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WITH_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMPONENT_TKN:{
        jj_consume_token(COMPONENT_TKN);
        SingleTypeConstraint();
        break;
        }
      case COMPONENTS_TKN:{
        jj_consume_token(COMPONENTS_TKN);
        MultipleTypeConstraints();
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SingleTypeConstraint() throws ParseException {/*@bgen(jjtree) SingleTypeConstraint */
  ASTSingleTypeConstraint jjtn000 = new ASTSingleTypeConstraint(JJTSINGLETYPECONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SubtypeSpec();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void MultipleTypeConstraints() throws ParseException {/*@bgen(jjtree) MultipleTypeConstraints */
  ASTMultipleTypeConstraints jjtn000 = new ASTMultipleTypeConstraints(JJTMULTIPLETYPECONSTRAINTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTBRACE_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT_TKN:{
        jj_consume_token(DOT_TKN);
        jj_consume_token(DOT_TKN);
        jj_consume_token(DOT_TKN);
        jj_consume_token(COMMA_TKN);
        break;
        }
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      TypeConstraints();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TypeConstraints() throws ParseException {/*@bgen(jjtree) TypeConstraints */
  ASTTypeConstraints jjtn000 = new ASTTypeConstraints(JJTTYPECONSTRAINTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      NamedConstraint();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA_TKN:{
          ;
          break;
          }
        default:
          jj_la1[55] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA_TKN);
        NamedConstraint();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void NamedConstraint() throws ParseException {/*@bgen(jjtree) NamedConstraint */
  ASTNamedConstraint jjtn000 = new ASTNamedConstraint(JJTNAMEDCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPLIED_TKN:
      case LCASEFIRST_IDENT_TKN:{
        identifier();
        break;
        }
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      Constraint();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Constraint() throws ParseException {/*@bgen(jjtree) Constraint */
  ASTConstraint jjtn000 = new ASTConstraint(JJTCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTPAREN_TKN:{
        ValueConstraint();
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSENT_TKN:
      case OPTIONAL_TKN:
      case PRESENT_TKN:{
        PresenceConstraint();
        break;
        }
      default:
        jj_la1[58] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ValueConstraint() throws ParseException {/*@bgen(jjtree) ValueConstraint */
  ASTValueConstraint jjtn000 = new ASTValueConstraint(JJTVALUECONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SubtypeSpec();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void PresenceConstraint() throws ParseException {/*@bgen(jjtree) PresenceConstraint */
  ASTPresenceConstraint jjtn000 = new ASTPresenceConstraint(JJTPRESENCECONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRESENT_TKN:{
        jj_consume_token(PRESENT_TKN);
        break;
        }
      case ABSENT_TKN:{
        jj_consume_token(ABSENT_TKN);
        break;
        }
      case OPTIONAL_TKN:{
        jj_consume_token(OPTIONAL_TKN);
        break;
        }
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ValueAssignment() throws ParseException {/*@bgen(jjtree) ValueAssignment */
  ASTValueAssignment jjtn000 = new ASTValueAssignment(JJTVALUEASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      GlobalType();
      jj_consume_token(GETS_TKN);
      if (jj_2_7(2)) {
        identifier();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SELECTOR_TKN:{
          jj_consume_token(SELECTOR_TKN);
          break;
          }
        default:
          jj_la1[60] = jj_gen;
          ;
        }
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BSTRING_TKN:
      case HSTRING_TKN:
      case CSTRING_TKN:
      case PLUS_NUMBER_TKN:
      case MINUS_NUMBER_TKN:
      case LEFTBRACE_TKN:
      case FALSE_TKN:
      case MINUS_INFINITY_TKN:
      case NULL_TKN:
      case PLUS_INFINITY_TKN:
      case TRUE_TKN:{
        BuiltinValue();
        break;
        }
      default:
        jj_la1[61] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Value() throws ParseException {/*@bgen(jjtree) Value */
  ASTValue jjtn000 = new ASTValue(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_8(2)) {
        BuiltinValue();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPLIED_TKN:
        case LCASEFIRST_IDENT_TKN:
        case UCASEFIRST_IDENT_TKN:{
          DefinedValue();
          break;
          }
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void DefinedValue() throws ParseException {/*@bgen(jjtree) DefinedValue */
  ASTDefinedValue jjtn000 = new ASTDefinedValue(JJTDEFINEDVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UCASEFIRST_IDENT_TKN:{
        modulereference();
        jj_consume_token(DOT_TKN);
        break;
        }
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      identifier();
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void BuiltinValue() throws ParseException {/*@bgen(jjtree) BuiltinValue */
  ASTBuiltinValue jjtn000 = new ASTBuiltinValue(JJTBUILTINVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE_TKN:
      case TRUE_TKN:{
        BooleanValue();
        break;
        }
      case NULL_TKN:{
        NullValue();
        break;
        }
      case MINUS_INFINITY_TKN:
      case PLUS_INFINITY_TKN:{
        SpecialRealValue();
        break;
        }
      case PLUS_NUMBER_TKN:
      case MINUS_NUMBER_TKN:{
        SignedNumber();
        break;
        }
      case HSTRING_TKN:{
        HexString();
        break;
        }
      case BSTRING_TKN:{
        BinaryString();
        break;
        }
      case CSTRING_TKN:{
        CharString();
        break;
        }
      case LEFTBRACE_TKN:{
        CompoundValue();
        break;
        }
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void CompoundValue() throws ParseException {/*@bgen(jjtree) CompoundValue */
  ASTCompoundValue jjtn000 = new ASTCompoundValue(JJTCOMPOUNDVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTBRACE_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS_NUMBER_TKN:
      case IMPLIED_TKN:
      case LCASEFIRST_IDENT_TKN:{
        ObjIdComponentList();
        break;
        }
      default:
        jj_la1[65] = jj_gen;
        skip_to_matching_brace();
      }
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  void skip_to_matching_brace() throws ParseException {/*@bgen(jjtree) skip_to_matching_brace */
 ASTskip_to_matching_brace jjtn000 = new ASTskip_to_matching_brace(JJTSKIP_TO_MATCHING_BRACE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {Token tok;
    int nesting = 1;
    while (true) {
        tok = getToken(1);
        if (tok.kind == LEFTBRACE_TKN) {
            nesting++;
            }
        if (tok.kind == RIGHTBRACE_TKN) {
            nesting--;
            if (nesting == 0) {
                break;
            }
        }
        tok = getNextToken();
    }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
  }

  final public void BooleanValue() throws ParseException {/*@bgen(jjtree) BooleanValue */
  ASTBooleanValue jjtn000 = new ASTBooleanValue(JJTBOOLEANVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE_TKN:{
        jj_consume_token(TRUE_TKN);
        break;
        }
      case FALSE_TKN:{
        jj_consume_token(FALSE_TKN);
        break;
        }
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SpecialRealValue() throws ParseException {/*@bgen(jjtree) SpecialRealValue */
  ASTSpecialRealValue jjtn000 = new ASTSpecialRealValue(JJTSPECIALREALVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS_INFINITY_TKN:{
        jj_consume_token(PLUS_INFINITY_TKN);
        break;
        }
      case MINUS_INFINITY_TKN:{
        jj_consume_token(MINUS_INFINITY_TKN);
        break;
        }
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void NullValue() throws ParseException {/*@bgen(jjtree) NullValue */
  ASTNullValue jjtn000 = new ASTNullValue(JJTNULLVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NULL_TKN);
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void NamedValue() throws ParseException {/*@bgen(jjtree) NamedValue */
  ASTNamedValue jjtn000 = new ASTNamedValue(JJTNAMEDVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_9(2)) {
        identifier();
      } else {
        ;
      }
      Value();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ObjectIdentifierValue() throws ParseException {/*@bgen(jjtree) ObjectIdentifierValue */
  ASTObjectIdentifierValue jjtn000 = new ASTObjectIdentifierValue(JJTOBJECTIDENTIFIERVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTBRACE_TKN);
      ObjIdComponentList();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ObjIdComponentList() throws ParseException {/*@bgen(jjtree) ObjIdComponentList */
  ASTObjIdComponentList jjtn000 = new ASTObjIdComponentList(JJTOBJIDCOMPONENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ObjIdComponent();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS_NUMBER_TKN:
        case IMPLIED_TKN:
        case LCASEFIRST_IDENT_TKN:{
          ;
          break;
          }
        default:
          jj_la1[68] = jj_gen;
          break label_10;
        }
        ObjIdComponent();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ObjIdComponent() throws ParseException {/*@bgen(jjtree) ObjIdComponent */
  ASTObjIdComponent jjtn000 = new ASTObjIdComponent(JJTOBJIDCOMPONENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS_NUMBER_TKN:{
        NumberForm();
        break;
        }
      case IMPLIED_TKN:
      case LCASEFIRST_IDENT_TKN:{
        NameAndNumberForm();
        break;
        }
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NumberForm() throws ParseException {/*@bgen(jjtree) NumberForm */
  ASTNumberForm jjtn000 = new ASTNumberForm(JJTNUMBERFORM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      number();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void NameAndNumberForm() throws ParseException {/*@bgen(jjtree) NameAndNumberForm */
  ASTNameAndNumberForm jjtn000 = new ASTNameAndNumberForm(JJTNAMEANDNUMBERFORM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFTPAREN_TKN:{
        jj_consume_token(LEFTPAREN_TKN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS_NUMBER_TKN:{
          NumberForm();
          break;
          }
        case IMPLIED_TKN:
        case LCASEFIRST_IDENT_TKN:
        case UCASEFIRST_IDENT_TKN:{
          DefinedValue();
          break;
          }
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RIGHTPAREN_TKN);
        break;
        }
      default:
        jj_la1[71] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BinaryString() throws ParseException {/*@bgen(jjtree) BinaryString */
    ASTBinaryString jjtn000 = new ASTBinaryString(JJTBINARYSTRING);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(BSTRING_TKN);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void HexString() throws ParseException {/*@bgen(jjtree) HexString */
    ASTHexString jjtn000 = new ASTHexString(JJTHEXSTRING);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(HSTRING_TKN);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void CharString() throws ParseException {/*@bgen(jjtree) CharString */
    ASTCharString jjtn000 = new ASTCharString(JJTCHARSTRING);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CSTRING_TKN);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void number() throws ParseException {/*@bgen(jjtree) number */
    ASTnumber jjtn000 = new ASTnumber(JJTNUMBER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(PLUS_NUMBER_TKN);
jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  final public void identifier() throws ParseException {/*@bgen(jjtree) identifier */
    ASTidentifier jjtn000 = new ASTidentifier(JJTIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPLIED_TKN:{
        jj_consume_token(IMPLIED_TKN);
        break;
        }
      default:
        jj_la1[72] = jj_gen;
        ;
      }
      t = jj_consume_token(LCASEFIRST_IDENT_TKN);
jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void modulereference() throws ParseException {/*@bgen(jjtree) modulereference */
    ASTmodulereference jjtn000 = new ASTmodulereference(JJTMODULEREFERENCE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(UCASEFIRST_IDENT_TKN);
jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void typereference() throws ParseException {/*@bgen(jjtree) typereference */
    ASTtypereference jjtn000 = new ASTtypereference(JJTTYPEREFERENCE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(UCASEFIRST_IDENT_TKN);
jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void TextualConventionMacroType() throws ParseException {/*@bgen(jjtree) TextualConventionMacroType */
  ASTTextualConventionMacroType jjtn000 = new ASTTextualConventionMacroType(JJTTEXTUALCONVENTIONMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TC_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DHINT:{
        SnmpDisplayHintPart();
        break;
        }
      default:
        jj_la1[73] = jj_gen;
        ;
      }
      SnmpStatus();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DESCRIPTION_TKN:{
        SnmpDescrPart();
        break;
        }
      default:
        jj_la1[74] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REFERENCE_TKN:{
        SnmpReferencePart();
        break;
        }
      default:
        jj_la1[75] = jj_gen;
        ;
      }
      SnmpSyntaxPart();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ModuleIdentityMacroType() throws ParseException {/*@bgen(jjtree) ModuleIdentityMacroType */
  ASTModuleIdentityMacroType jjtn000 = new ASTModuleIdentityMacroType(JJTMODULEIDENTITYMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MI_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DHINT:{
        SnmpDisplayHintPart();
        break;
        }
      default:
        jj_la1[76] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUBJECT_CATEGORIES_TKN:{
        SnmpSubjectCategoriesPart();
        break;
        }
      default:
        jj_la1[77] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LAST_UPDATED_TKN:{
        SnmpLastUpdatedPart();
        break;
        }
      default:
        jj_la1[78] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ORGANIZATION_TKN:{
        SnmpOrganizationPart();
        break;
        }
      default:
        jj_la1[79] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONTACT_INFO_TKN:{
        SnmpContactInfoPart();
        break;
        }
      default:
        jj_la1[80] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DESCRIPTION_TKN:{
        SnmpDescrPart();
        break;
        }
      default:
        jj_la1[81] = jj_gen;
        ;
      }
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case REVISION_TKN:{
          ;
          break;
          }
        default:
          jj_la1[82] = jj_gen;
          break label_11;
        }
        SnmpRevisionPart();
        SnmpDescrPart();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void NotificationTypeMacroType() throws ParseException {/*@bgen(jjtree) NotificationTypeMacroType */
  ASTNotificationTypeMacroType jjtn000 = new ASTNotificationTypeMacroType(JJTNOTIFICATIONTYPEMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NT_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DHINT:{
        SnmpDisplayHintPart();
        break;
        }
      default:
        jj_la1[83] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OBJECTS_TKN:{
        SnmpObjectsPart();
        break;
        }
      default:
        jj_la1[84] = jj_gen;
        ;
      }
      SnmpStatus();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DESCRIPTION_TKN:{
        SnmpDescrPart();
        break;
        }
      default:
        jj_la1[85] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REFERENCE_TKN:{
        SnmpReferencePart();
        break;
        }
      default:
        jj_la1[86] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void NotificationGroupMacroType() throws ParseException {/*@bgen(jjtree) NotificationGroupMacroType */
  ASTNotificationGroupMacroType jjtn000 = new ASTNotificationGroupMacroType(JJTNOTIFICATIONGROUPMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NG_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DHINT:{
        SnmpDisplayHintPart();
        break;
        }
      default:
        jj_la1[87] = jj_gen;
        ;
      }
      SnmpNitificationsPart();
      SnmpStatus();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DESCRIPTION_TKN:{
        SnmpDescrPart();
        break;
        }
      default:
        jj_la1[88] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ModuleComplianceMacroType() throws ParseException {/*@bgen(jjtree) ModuleComplianceMacroType */
  ASTModuleComplianceMacroType jjtn000 = new ASTModuleComplianceMacroType(JJTMODULECOMPLIANCEMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MC_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DHINT:{
        SnmpDisplayHintPart();
        break;
        }
      default:
        jj_la1[89] = jj_gen;
        ;
      }
      SnmpStatus();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DESCRIPTION_TKN:{
        SnmpDescrPart();
        break;
        }
      default:
        jj_la1[90] = jj_gen;
        ;
      }
      label_12:
      while (true) {
        jj_consume_token(MODULE_TKN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UCASEFIRST_IDENT_TKN:{
          modulereference();
          break;
          }
        default:
          jj_la1[91] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MANDATORY_GROUPS_TKN:{
          SnmpMandatoryGroupsPart();
          break;
          }
        default:
          jj_la1[92] = jj_gen;
          ;
        }
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case GROUP_TKN:
          case OBJECT_TKN:{
            ;
            break;
            }
          default:
            jj_la1[93] = jj_gen;
            break label_13;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case GROUP_TKN:{
            SnmpGroupPart();
            break;
            }
          case OBJECT_TKN:{
            SnmpObjectPart();
            break;
            }
          default:
            jj_la1[94] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SYNTAX_TKN:{
            SnmpSyntaxPart();
            break;
            }
          default:
            jj_la1[95] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case WRITE_SYNTAX_TKN:{
            SnmpWriteSyntaxPart();
            break;
            }
          default:
            jj_la1[96] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ACCESS_TKN:{
            SnmpAccess();
            break;
            }
          default:
            jj_la1[97] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DESCRIPTION_TKN:{
            SnmpDescrPart();
            break;
            }
          default:
            jj_la1[98] = jj_gen;
            ;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MODULE_TKN:{
          ;
          break;
          }
        default:
          jj_la1[99] = jj_gen;
          break label_12;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ObjecGroupMacroType() throws ParseException {/*@bgen(jjtree) ObjecGroupMacroType */
  ASTObjecGroupMacroType jjtn000 = new ASTObjecGroupMacroType(JJTOBJECGROUPMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OG_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DHINT:{
        SnmpDisplayHintPart();
        break;
        }
      default:
        jj_la1[100] = jj_gen;
        ;
      }
      SnmpObjectsPart();
      SnmpStatus();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DESCRIPTION_TKN:{
        SnmpDescrPart();
        break;
        }
      default:
        jj_la1[101] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REFERENCE_TKN:{
        SnmpReferencePart();
        break;
        }
      default:
        jj_la1[102] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ObjecIdentityMacroType() throws ParseException {/*@bgen(jjtree) ObjecIdentityMacroType */
  ASTObjecIdentityMacroType jjtn000 = new ASTObjecIdentityMacroType(JJTOBJECIDENTITYMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OI_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DHINT:{
        SnmpDisplayHintPart();
        break;
        }
      default:
        jj_la1[103] = jj_gen;
        ;
      }
      SnmpStatus();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DESCRIPTION_TKN:{
        SnmpDescrPart();
        break;
        }
      default:
        jj_la1[104] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REFERENCE_TKN:{
        SnmpReferencePart();
        break;
        }
      default:
        jj_la1[105] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void TrapTypeMacroType() throws ParseException {/*@bgen(jjtree) TrapTypeMacroType */
  ASTTrapTypeMacroType jjtn000 = new ASTTrapTypeMacroType(JJTTRAPTYPEMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TT_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DHINT:{
        SnmpDisplayHintPart();
        break;
        }
      default:
        jj_la1[106] = jj_gen;
        ;
      }
      SnmpEnterprisePart();
      SnmpVariablesPart();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DESCRIPTION_TKN:{
        SnmpDescrPart();
        break;
        }
      default:
        jj_la1[107] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void AgentCapabilitiesMacroType() throws ParseException {/*@bgen(jjtree) AgentCapabilitiesMacroType */
  ASTAgentCapabilitiesMacroType jjtn000 = new ASTAgentCapabilitiesMacroType(JJTAGENTCAPABILITIESMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(AC_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DHINT:{
        SnmpDisplayHintPart();
        break;
        }
      default:
        jj_la1[108] = jj_gen;
        ;
      }
      SnmpProductReleasePart();
      SnmpStatus();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DESCRIPTION_TKN:{
        SnmpDescrPart();
        break;
        }
      default:
        jj_la1[109] = jj_gen;
        ;
      }
      label_14:
      while (true) {
        SnmpSupportsPart();
        SnmpIncludesPart();
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VARIATION_TKN:{
            ;
            break;
            }
          default:
            jj_la1[110] = jj_gen;
            break label_15;
          }
          SnmpValiationPart();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SUPPORTS_TKN:{
          ;
          break;
          }
        default:
          jj_la1[111] = jj_gen;
          break label_14;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ObjectTypeMacroType() throws ParseException {/*@bgen(jjtree) ObjectTypeMacroType */
  ASTObjectTypeMacroType jjtn000 = new ASTObjectTypeMacroType(JJTOBJECTTYPEMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OBJECTTYPE_TKN);
      SnmpSyntaxPart();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UNITS_TKN:{
        SnmpUnitsPart();
        break;
        }
      default:
        jj_la1[112] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TAG_TKN:{
        SnmpTagPart();
        break;
        }
      default:
        jj_la1[113] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REFERENCES_TKN:{
        SnmpReferencesPart();
        break;
        }
      default:
        jj_la1[114] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ACCESS_TKN:{
        SnmpAccess();
        break;
        }
      default:
        jj_la1[115] = jj_gen;
        ;
      }
      SnmpStatus();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DESCRIPTION_TKN:{
        SnmpDescrPart();
        break;
        }
      default:
        jj_la1[116] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REFERENCE_TKN:{
        SnmpReferencePart();
        break;
        }
      default:
        jj_la1[117] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INDEX_TKN:{
        SnmpIndexPart();
        break;
        }
      default:
        jj_la1[118] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS_TKN:{
        SnmpExtendsPart();
        break;
        }
      default:
        jj_la1[119] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UNIQUENESS_TKN:{
        SnmpUniquenessPart();
        break;
        }
      default:
        jj_la1[120] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEFVAL_TKN:{
        SnmpDefValPart();
        break;
        }
      default:
        jj_la1[121] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AUGMENTS_TKN:{
        SnmpAugmentsPart();
        break;
        }
      default:
        jj_la1[122] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INSTALL_ERRORS_TKN:{
        SnmpInstallErrorsPart();
        break;
        }
      default:
        jj_la1[123] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpDisplayHintPart() throws ParseException {/*@bgen(jjtree) SnmpDisplayHintPart */
    ASTSnmpDisplayHintPart jjtn000 = new ASTSnmpDisplayHintPart(JJTSNMPDISPLAYHINTPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(DHINT);
      t = jj_consume_token(CSTRING_TKN);
jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpObjectsPart() throws ParseException {/*@bgen(jjtree) SnmpObjectsPart */
  ASTSnmpObjectsPart jjtn000 = new ASTSnmpObjectsPart(JJTSNMPOBJECTSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OBJECTS_TKN);
      jj_consume_token(LEFTBRACE_TKN);
      TypeOrValueList();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpNitificationsPart() throws ParseException {/*@bgen(jjtree) SnmpNitificationsPart */
  ASTSnmpNitificationsPart jjtn000 = new ASTSnmpNitificationsPart(JJTSNMPNITIFICATIONSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NOTIFICATIONS_TKN);
      jj_consume_token(LEFTBRACE_TKN);
      TypeOrValueList();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpStatus() throws ParseException {/*@bgen(jjtree) SnmpStatus */
  ASTSnmpStatus jjtn000 = new ASTSnmpStatus(JJTSNMPSTATUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STATUS_TKN);
      identifier();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpAccess() throws ParseException {/*@bgen(jjtree) SnmpAccess */
  ASTSnmpAccess jjtn000 = new ASTSnmpAccess(JJTSNMPACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ACCESS_TKN);
      identifier();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpDescrPart() throws ParseException {/*@bgen(jjtree) SnmpDescrPart */
    ASTSnmpDescrPart jjtn000 = new ASTSnmpDescrPart(JJTSNMPDESCRPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(DESCRIPTION_TKN);
      t = jj_consume_token(CSTRING_TKN);
jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpReferencePart() throws ParseException {/*@bgen(jjtree) SnmpReferencePart */
    ASTSnmpReferencePart jjtn000 = new ASTSnmpReferencePart(JJTSNMPREFERENCEPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(REFERENCE_TKN);
      t = jj_consume_token(CSTRING_TKN);
jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpIndexPart() throws ParseException {/*@bgen(jjtree) SnmpIndexPart */
  ASTSnmpIndexPart jjtn000 = new ASTSnmpIndexPart(JJTSNMPINDEXPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INDEX_TKN);
      jj_consume_token(LEFTBRACE_TKN);
      TypeOrValueList();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpExtendsPart() throws ParseException {/*@bgen(jjtree) SnmpExtendsPart */
  ASTSnmpExtendsPart jjtn000 = new ASTSnmpExtendsPart(JJTSNMPEXTENDSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EXTENDS_TKN);
      jj_consume_token(LEFTBRACE_TKN);
      TypeOrValueList();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpUniquenessPart() throws ParseException {/*@bgen(jjtree) SnmpUniquenessPart */
  ASTSnmpUniquenessPart jjtn000 = new ASTSnmpUniquenessPart(JJTSNMPUNIQUENESSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(UNIQUENESS_TKN);
      jj_consume_token(LEFTBRACE_TKN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OBJECT_IDENTIFIER_TKN:
      case BSTRING_TKN:
      case HSTRING_TKN:
      case CSTRING_TKN:
      case PLUS_NUMBER_TKN:
      case MINUS_NUMBER_TKN:
      case LEFTBRACE_TKN:
      case LEFTBRACKET_TKN:
      case ANY_TKN:
      case BIT_TKN:
      case BOOLEAN_TKN:
      case CHOICE_TKN:
      case ENUMERATED_TKN:
      case EXTERNAL_TKN:
      case FALSE_TKN:
      case IMPLIED_TKN:
      case INTEGER_TKN:
      case MINUS_INFINITY_TKN:
      case NULL_TKN:
      case OCTET_TKN:
      case PLUS_INFINITY_TKN:
      case REAL_TKN:
      case SEQUENCE_TKN:
      case SET_TKN:
      case TRUE_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:{
        TypeOrValueList();
        break;
        }
      default:
        jj_la1[124] = jj_gen;
        ;
      }
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void TypeOrValueList() throws ParseException {/*@bgen(jjtree) TypeOrValueList */
  ASTTypeOrValueList jjtn000 = new ASTTypeOrValueList(JJTTYPEORVALUELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TypeOrValue();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA_TKN:{
          ;
          break;
          }
        default:
          jj_la1[125] = jj_gen;
          break label_16;
        }
        jj_consume_token(COMMA_TKN);
        TypeOrValue();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TypeOrValue() throws ParseException {/*@bgen(jjtree) TypeOrValue */
  ASTTypeOrValue jjtn000 = new ASTTypeOrValue(JJTTYPEORVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_10(3)) {
        Type();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BSTRING_TKN:
        case HSTRING_TKN:
        case CSTRING_TKN:
        case PLUS_NUMBER_TKN:
        case MINUS_NUMBER_TKN:
        case LEFTBRACE_TKN:
        case FALSE_TKN:
        case IMPLIED_TKN:
        case MINUS_INFINITY_TKN:
        case NULL_TKN:
        case PLUS_INFINITY_TKN:
        case TRUE_TKN:
        case LCASEFIRST_IDENT_TKN:
        case UCASEFIRST_IDENT_TKN:{
          Value();
          break;
          }
        default:
          jj_la1[126] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SnmpDefValPart() throws ParseException {/*@bgen(jjtree) SnmpDefValPart */
  ASTSnmpDefValPart jjtn000 = new ASTSnmpDefValPart(JJTSNMPDEFVALPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DEFVAL_TKN);
      jj_consume_token(LEFTBRACE_TKN);
      SnmpDefValSubPart();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpDefValSubPart() throws ParseException {/*@bgen(jjtree) SnmpDefValSubPart */
  ASTSnmpDefValSubPart jjtn000 = new ASTSnmpDefValSubPart(JJTSNMPDEFVALSUBPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_11(2)) {
        jj_consume_token(LEFTBRACE_TKN);
        SnmpDefValSubSubPart();
        jj_consume_token(RIGHTBRACE_TKN);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BSTRING_TKN:
        case HSTRING_TKN:
        case CSTRING_TKN:
        case PLUS_NUMBER_TKN:
        case MINUS_NUMBER_TKN:
        case LEFTBRACE_TKN:
        case FALSE_TKN:
        case IMPLIED_TKN:
        case MINUS_INFINITY_TKN:
        case NULL_TKN:
        case PLUS_INFINITY_TKN:
        case TRUE_TKN:
        case LCASEFIRST_IDENT_TKN:
        case UCASEFIRST_IDENT_TKN:{
          Value();
          break;
          }
        default:
          jj_la1[127] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SnmpDefValSubSubPart() throws ParseException {/*@bgen(jjtree) SnmpDefValSubSubPart */
  ASTSnmpDefValSubSubPart jjtn000 = new ASTSnmpDefValSubSubPart(JJTSNMPDEFVALSUBSUBPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SnmpDefValSubSubSubPart();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA_TKN:{
          ;
          break;
          }
        default:
          jj_la1[128] = jj_gen;
          break label_17;
        }
        jj_consume_token(COMMA_TKN);
        SnmpDefValSubSubSubPart();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpDefValSubSubSubPart() throws ParseException {/*@bgen(jjtree) SnmpDefValSubSubSubPart */
  ASTSnmpDefValSubSubSubPart jjtn000 = new ASTSnmpDefValSubSubSubPart(JJTSNMPDEFVALSUBSUBSUBPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Value();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BSTRING_TKN:
      case HSTRING_TKN:
      case CSTRING_TKN:
      case PLUS_NUMBER_TKN:
      case MINUS_NUMBER_TKN:
      case LEFTBRACE_TKN:
      case FALSE_TKN:
      case IMPLIED_TKN:
      case MINUS_INFINITY_TKN:
      case NULL_TKN:
      case PLUS_INFINITY_TKN:
      case TRUE_TKN:
      case LCASEFIRST_IDENT_TKN:
      case UCASEFIRST_IDENT_TKN:{
        Value();
        break;
        }
      default:
        jj_la1[129] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpAugmentsPart() throws ParseException {/*@bgen(jjtree) SnmpAugmentsPart */
  ASTSnmpAugmentsPart jjtn000 = new ASTSnmpAugmentsPart(JJTSNMPAUGMENTSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(AUGMENTS_TKN);
      jj_consume_token(LEFTBRACE_TKN);
      Value();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpInstallErrorsPart() throws ParseException {/*@bgen(jjtree) SnmpInstallErrorsPart */
  ASTSnmpInstallErrorsPart jjtn000 = new ASTSnmpInstallErrorsPart(JJTSNMPINSTALLERRORSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INSTALL_ERRORS_TKN);
      jj_consume_token(LEFTBRACE_TKN);
      NamedNumberList();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpSubjectCategoriesPart() throws ParseException {/*@bgen(jjtree) SnmpSubjectCategoriesPart */
  ASTSnmpSubjectCategoriesPart jjtn000 = new ASTSnmpSubjectCategoriesPart(JJTSNMPSUBJECTCATEGORIESPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SUBJECT_CATEGORIES_TKN);
      jj_consume_token(LEFTBRACE_TKN);
      NameAndNumberForm();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpLastUpdatedPart() throws ParseException {/*@bgen(jjtree) SnmpLastUpdatedPart */
    ASTSnmpLastUpdatedPart jjtn000 = new ASTSnmpLastUpdatedPart(JJTSNMPLASTUPDATEDPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(LAST_UPDATED_TKN);
      t = jj_consume_token(CSTRING_TKN);
jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpOrganizationPart() throws ParseException {/*@bgen(jjtree) SnmpOrganizationPart */
    ASTSnmpOrganizationPart jjtn000 = new ASTSnmpOrganizationPart(JJTSNMPORGANIZATIONPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(ORGANIZATION_TKN);
      t = jj_consume_token(CSTRING_TKN);
jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpContactInfoPart() throws ParseException {/*@bgen(jjtree) SnmpContactInfoPart */
    ASTSnmpContactInfoPart jjtn000 = new ASTSnmpContactInfoPart(JJTSNMPCONTACTINFOPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(CONTACT_INFO_TKN);
      t = jj_consume_token(CSTRING_TKN);
jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpRevisionPart() throws ParseException {/*@bgen(jjtree) SnmpRevisionPart */
    ASTSnmpRevisionPart jjtn000 = new ASTSnmpRevisionPart(JJTSNMPREVISIONPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(REVISION_TKN);
      t = jj_consume_token(CSTRING_TKN);
jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpReferencesPart() throws ParseException {/*@bgen(jjtree) SnmpReferencesPart */
  ASTSnmpReferencesPart jjtn000 = new ASTSnmpReferencesPart(JJTSNMPREFERENCESPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REFERENCES_TKN);
      jj_consume_token(LEFTBRACE_TKN);
      TypeOrValueList();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpSyntaxPart() throws ParseException {/*@bgen(jjtree) SnmpSyntaxPart */
  ASTSnmpSyntaxPart jjtn000 = new ASTSnmpSyntaxPart(JJTSNMPSYNTAXPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SYNTAX_TKN);
      Type();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpWriteSyntaxPart() throws ParseException {/*@bgen(jjtree) SnmpWriteSyntaxPart */
  ASTSnmpWriteSyntaxPart jjtn000 = new ASTSnmpWriteSyntaxPart(JJTSNMPWRITESYNTAXPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WRITE_SYNTAX_TKN);
      Type();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpEnterprisePart() throws ParseException {/*@bgen(jjtree) SnmpEnterprisePart */
  ASTSnmpEnterprisePart jjtn000 = new ASTSnmpEnterprisePart(JJTSNMPENTERPRISEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ENTERPRISE_TKN);
      identifier();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpVariablesPart() throws ParseException {/*@bgen(jjtree) SnmpVariablesPart */
  ASTSnmpVariablesPart jjtn000 = new ASTSnmpVariablesPart(JJTSNMPVARIABLESPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VARIABLES_TKN);
      jj_consume_token(LEFTBRACE_TKN);
      TypeOrValueList();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpUnitsPart() throws ParseException {/*@bgen(jjtree) SnmpUnitsPart */
    ASTSnmpUnitsPart jjtn000 = new ASTSnmpUnitsPart(JJTSNMPUNITSPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(UNITS_TKN);
      t = jj_consume_token(CSTRING_TKN);
jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpTagPart() throws ParseException {/*@bgen(jjtree) SnmpTagPart */
  ASTSnmpTagPart jjtn000 = new ASTSnmpTagPart(JJTSNMPTAGPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TAG_TKN);
      jj_consume_token(LEFTBRACE_TKN);
      TypeOrValueList();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpMandatoryGroupsPart() throws ParseException {/*@bgen(jjtree) SnmpMandatoryGroupsPart */
  ASTSnmpMandatoryGroupsPart jjtn000 = new ASTSnmpMandatoryGroupsPart(JJTSNMPMANDATORYGROUPSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MANDATORY_GROUPS_TKN);
      jj_consume_token(LEFTBRACE_TKN);
      TypeOrValueList();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpGroupPart() throws ParseException {/*@bgen(jjtree) SnmpGroupPart */
  ASTSnmpGroupPart jjtn000 = new ASTSnmpGroupPart(JJTSNMPGROUPPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GROUP_TKN);
      Value();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpObjectPart() throws ParseException {/*@bgen(jjtree) SnmpObjectPart */
  ASTSnmpObjectPart jjtn000 = new ASTSnmpObjectPart(JJTSNMPOBJECTPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OBJECT_TKN);
      Value();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpProductReleasePart() throws ParseException {/*@bgen(jjtree) SnmpProductReleasePart */
    ASTSnmpProductReleasePart jjtn000 = new ASTSnmpProductReleasePart(JJTSNMPPRODUCTRELEASEPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(PRODUCT_RELEASE_TKN);
      t = jj_consume_token(CSTRING_TKN);
jjtree.closeNodeScope(jjtn000, true);
                                             jjtc000 = false;
jjtn000.value = t;
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpSupportsPart() throws ParseException {/*@bgen(jjtree) SnmpSupportsPart */
  ASTSnmpSupportsPart jjtn000 = new ASTSnmpSupportsPart(JJTSNMPSUPPORTSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SUPPORTS_TKN);
      modulereference();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpIncludesPart() throws ParseException {/*@bgen(jjtree) SnmpIncludesPart */
  ASTSnmpIncludesPart jjtn000 = new ASTSnmpIncludesPart(JJTSNMPINCLUDESPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INCLUDES_TKN);
      jj_consume_token(LEFTBRACE_TKN);
      TypeOrValueList();
      jj_consume_token(RIGHTBRACE_TKN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SnmpValiationPart() throws ParseException {/*@bgen(jjtree) SnmpValiationPart */
  ASTSnmpValiationPart jjtn000 = new ASTSnmpValiationPart(JJTSNMPVALIATIONPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VARIATION_TKN);
      Value();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYNTAX_TKN:{
        SnmpSyntaxPart();
        break;
        }
      default:
        jj_la1[130] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ACCESS_TKN:{
        SnmpAccess();
        break;
        }
      default:
        jj_la1[131] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DESCRIPTION_TKN:{
        SnmpDescrPart();
        break;
        }
      default:
        jj_la1[132] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_3R_102()
 {
    if (jj_scan_token(WITH_TKN)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_21()) return true;
    if (jj_scan_token(DOT_TKN)) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    xsp = jj_scanpos;
    if (jj_3R_94()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_scan_token(FROM_TKN)) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    if (jj_scan_token(SIZE_TKN)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_99()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(UCASEFIRST_IDENT_TKN)) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    if (jj_scan_token(INCLUDES_TKN)) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_scan_token(UCASEFIRST_IDENT_TKN)) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(LEFTBRACE_TKN)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(68)) jj_scanpos = xsp;
    if (jj_scan_token(LCASEFIRST_IDENT_TKN)) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_scan_token(PLUS_NUMBER_TKN)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_scan_token(LEFTPAREN_TKN)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_scan_token(CSTRING_TKN)) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_scan_token(HSTRING_TKN)) return true;
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_scan_token(BSTRING_TKN)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_124()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_121()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_125()
 {
    if (jj_scan_token(COMPONENTS_TKN)) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_120()
 {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    if (jj_scan_token(MACRO_TKN)) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_123()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_110()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_scan_token(MINUS_NUMBER_TKN)) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_scan_token(PLUS_NUMBER_TKN)) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_scan_token(DEFINED_TKN)) return true;
    if (jj_scan_token(BY_TKN)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_scan_token(NULL_TKN)) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_scan_token(ANY_TKN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_scan_token(LEFTBRACKET_TKN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    if (jj_scan_token(RIGHTBRACKET_TKN)) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    }
    return false;
  }

  private boolean jj_3R_111()
 {
    if (jj_scan_token(LEFTBRACE_TKN)) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_3R_23()) return true;
    if (jj_scan_token(LESSTHAN_TKN)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) return true;
    }
    if (jj_scan_token(LEFTBRACE_TKN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_112()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHTBRACE_TKN)) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_scan_token(CHOICE_TKN)) return true;
    if (jj_scan_token(LEFTBRACE_TKN)) return true;
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(LEFTBRACE_TKN)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    if (jj_scan_token(OF_TKN)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_scan_token(LEFTBRACE_TKN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_scan_token(BIT_TKN)) return true;
    if (jj_scan_token(STRING_TKN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_scan_token(INTEGER_TKN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_scan_token(ENUMERATED_TKN)) return true;
    if (jj_scan_token(LEFTBRACE_TKN)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_3R_21()) return true;
    if (jj_scan_token(DOT_TKN)) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_scan_token(EXTERNAL_TKN)) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_scan_token(NULL_TKN)) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_scan_token(BOOLEAN_TKN)) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_scan_token(REAL_TKN)) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_scan_token(OBJECT_IDENTIFIER_TKN)) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_scan_token(OCTET_TKN)) return true;
    if (jj_scan_token(STRING_TKN)) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_scan_token(LEFTBRACE_TKN)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public AsnParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[133];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x10000,0x0,0x0,0xf0000000,0xf0000000,0x8000,0xf0000000,0xf0000000,0x8000,0xf0000000,0x4000000,0xf0000000,0x4000000,0x0,0xf0000000,0xf0000000,0x0,0xf0100100,0xf0000000,0x10000,0x0,0x100100,0x10000,0x10000,0x0,0x40000,0x80000,0x40000,0x0,0x100100,0x0,0x0,0x0,0x0,0x8000,0x3000,0x3000,0x8000,0x0,0x0,0x100100,0x1000,0x0,0x2000000,0x13e00,0x13e00,0x400000,0x400000,0x13e00,0x404000,0x0,0x4000,0x8000,0x0,0x40000,0x0,0x0,0x8000000,0x13e00,0x0,0x0,0x13e00,0x1000,0x0,0x0,0x1000,0x1000,0x1000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x113f00,0x8000,0x13e00,0x13e00,0x8000,0x13e00,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x10000000,0x10000000,0x0,0x20000000,0x0,0x3f,0x3f,0x0,0x3f,0x3f,0x0,0x3f,0x0,0x3f,0x0,0x0,0x3f,0x3f,0x0,0x8800b13f,0x3f,0x0,0x1000,0x8800a100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8802b100,0x10000000,0x10000000,0x200,0x100000,0x0,0x0,0x0,0x0,0x80000,0x80000,0x8802b100,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30000,0x0,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x800000,0x0,0x1000000,0x0,0x0,0x0,0x40000,0x800000,0x0,0x1000000,0x0,0x800000,0x0,0x1000000,0x800000,0x1000000,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x800000,0x0,0x1000000,0x800000,0x0,0x1000000,0x800000,0x0,0x1000000,0x800000,0x1000000,0x800000,0x0,0x0,0x0,0x0,0x0,0x80,0x800000,0x0,0x0,0x40000000,0x0,0x400000,0x400,0x0,0x8800b100,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x800000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x8,0x8,0x0,0x0,0x20,0x10,0x10,0x0,0x10,0x10,0x0,0x10,0x0,0x10,0x0,0x10,0x0,0x0,0x0,0x20240210,0x0,0x0,0x200,0x20240010,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20240210,0x8,0x8,0x8000000,0x0,0x0,0x10,0x0,0x0,0x800000,0x800000,0x20240210,0x10,0x8000000,0x0,0x204c053,0x204c011,0x0,0x0,0x204a011,0x0,0x0,0x0,0x0,0x10,0x0,0x4800000,0x4800000,0x0,0x2048001,0x10,0x0,0x2048001,0x10,0x1,0x2008000,0x10,0x10,0x10,0x0,0x10,0x0,0x0,0x40000000,0x0,0x0,0x400,0x1000000,0x0,0x0,0x0,0x0,0x100000,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x1000,0x80004,0x80004,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x40000000,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x40000000,0x80,0x0,0x0,0x0,0x0,0x100,0x22248211,0x0,0x2048011,0x2048011,0x0,0x2048011,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x100000,0x0,0x0,0x0,0x0,0x0,0x180000,0x180000,0x0,0x180000,0x180000,0x0,0x180000,0x0,0x180000,0x0,0x180000,0x100000,0x100000,0x100000,0x180006,0x0,0x0,0x0,0x80006,0x0,0x0,0x6,0x0,0x0,0x8,0x6,0x180006,0x0,0x0,0x4000,0x0,0x0,0x180000,0x0,0x0,0x0,0x0,0x180006,0x180000,0x4000,0x0,0x1a0808,0x180800,0x0,0x0,0x180800,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x800,0x180000,0x100000,0x800,0x80000,0x800,0x0,0x80000,0x80000,0x180000,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x100,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x80,0x2000,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x180806,0x0,0x180800,0x180800,0x0,0x180800,0x100,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[11];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public AsnParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AsnParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AsnParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 133; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 133; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public AsnParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AsnParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 133; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new AsnParserTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 133; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public AsnParser(AsnParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 133; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AsnParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 133; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
       return;
    }

    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];

      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }

      for (int[] oldentry : jj_expentries) {
        if (oldentry.length == jj_expentry.length) {
          boolean isMatched = true;

          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              isMatched = false;
              break;
            }

          }
          if (isMatched) {
            jj_expentries.add(jj_expentry);
            break;
          }
        }
      }

      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
      }
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[117];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 133; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 117; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 11; i++) {
      try {
        JJCalls p = jj_2_rtns[i];

        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
              case 1: jj_3_2(); break;
              case 2: jj_3_3(); break;
              case 3: jj_3_4(); break;
              case 4: jj_3_5(); break;
              case 5: jj_3_6(); break;
              case 6: jj_3_7(); break;
              case 7: jj_3_8(); break;
              case 8: jj_3_9(); break;
              case 9: jj_3_10(); break;
              case 10: jj_3_11(); break;
            }
          }
          p = p.next;
        } while (p != null);

        } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }

    p.gen = jj_gen + xla - jj_la; 
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
