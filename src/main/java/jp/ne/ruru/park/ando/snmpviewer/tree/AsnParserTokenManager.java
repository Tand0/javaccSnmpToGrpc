package jp.ne.ruru.park.ando.snmpviewer.tree;


/* AsnParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. AsnParserTokenManager.java */

/** Token Manager. */
@SuppressWarnings("unused")public class AsnParserTokenManager implements AsnParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1d8000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            return 42;
         }
         if ((active0 & 0x2600000000L) != 0L || (active1 & 0x1f80000L) != 0L)
         {
            jjmatchedKind = 116;
            return 15;
         }
         if ((active1 & 0x378L) != 0L)
         {
            jjmatchedKind = 116;
            return 47;
         }
         if ((active0 & 0x120000000L) != 0L || (active1 & 0x1f800L) != 0L)
         {
            jjmatchedKind = 116;
            return 61;
         }
         if ((active0 & 0xfe07f800c0000000L) != 0L || (active1 & 0x7f1fe00060407L) != 0L)
         {
            jjmatchedKind = 116;
            return 110;
         }
         if ((active1 & 0x1e000000L) != 0L)
         {
            jjmatchedKind = 116;
            return 74;
         }
         if ((active0 & 0x75000000000L) != 0L)
         {
            jjmatchedKind = 116;
            return 31;
         }
         if ((active0 & 0x810000000L) != 0L || (active1 & 0xc0000000000L) != 0L)
         {
            jjmatchedKind = 116;
            return 50;
         }
         if ((active1 & 0x120000000L) != 0L)
         {
            jjmatchedKind = 116;
            return 111;
         }
         if ((active0 & 0x800020L) != 0L)
            return 24;
         return -1;
      case 1:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 1;
            return 49;
         }
         if ((active0 & 0xd8000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 1;
            return 41;
         }
         if ((active1 & 0xc000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 1;
            return 62;
         }
         if ((active1 & 0x3800L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 1;
            return 60;
         }
         if ((active0 & 0xff07bf59f0000000L) != 0L || (active1 & 0x7f9fe1fa7043fL) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 1;
            return 110;
         }
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x400000L) != 0L)
            return 110;
         if ((active1 & 0x120000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 1;
            return 88;
         }
         if ((active0 & 0x2600000000L) != 0L || (active1 & 0x180000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 1;
            return 14;
         }
         if ((active1 & 0x340L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 1;
            return 46;
         }
         return -1;
      case 2:
         if ((active0 & 0x58000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 2;
            }
            return 40;
         }
         if ((active0 & 0x200110000000000L) != 0L || (active1 & 0x400000000L) != 0L)
            return 110;
         if ((active1 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 105;
               jjmatchedPos = 2;
            }
            return 110;
         }
         if ((active0 & 0xfd87ae59f0000000L) != 0L || (active1 & 0x7f9fb3fa71f7fL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 2;
            }
            return 110;
         }
         if ((active1 & 0xe000L) != 0L)
            return 112;
         if ((active0 & 0x2600000000L) != 0L || (active1 & 0x180000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 2;
            }
            return 13;
         }
         return -1;
      case 3:
         if ((active1 & 0x20c0820040002L) != 0L)
            return 110;
         if ((active0 & 0x2600000000L) != 0L || (active1 & 0x180000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 3;
            return 12;
         }
         if ((active0 & 0xfdcfae59f0000000L) != 0L || (active1 & 0x5f1f31fa39f7dL) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 3;
            return 110;
         }
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 3;
            return 39;
         }
         return -1;
      case 4:
         if ((active0 & 0x80000000000L) != 0L || (active1 & 0x200000200805L) != 0L)
            return 110;
         if ((active0 & 0xfdcfa651f0000000L) != 0L || (active1 & 0x5d1f31d839378L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 4;
            return 110;
         }
         if ((active0 & 0x2600000000L) != 0L || (active1 & 0x180000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 4;
            return 0;
         }
         if ((active0 & 0x800000000L) != 0L || (active1 & 0x2000400L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 3;
            }
            return 57;
         }
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 4;
            return 38;
         }
         return -1;
      case 5:
         if ((active0 & 0x40804120000000L) != 0L || (active1 & 0x13000010000L) != 0L)
            return 110;
         if ((active0 & 0x2600000000L) != 0L || (active1 & 0x180000L) != 0L)
            return 1;
         if ((active0 & 0xfd9f2608d0000000L) != 0L || (active1 & 0x1d0c31f821778L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 5;
            }
            return 110;
         }
         if ((active0 & 0x1000000000L) != 0L || (active1 & 0x4000000008000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 4;
            }
            return 57;
         }
         return -1;
      case 6:
         if ((active0 & 0x6018200000000000L) != 0L || (active1 & 0xc100230L) != 0L)
            return 110;
         if ((active0 & 0x9d870618d0000000L) != 0L || (active1 & 0x5d0c313829548L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 6;
            return 110;
         }
         if ((active0 & 0x2720000000L) != 0L)
            return 57;
         return -1;
      case 7:
         if ((active0 & 0x9000040000000000L) != 0L || (active1 & 0x8300800048L) != 0L)
            return 110;
         if ((active0 & 0xc83023fe0000000L) != 0L || (active1 & 0x5d00003029400L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 7;
            return 110;
         }
         if ((active0 & 0x104000010000000L) != 0L || (active1 & 0x4010000100L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 6;
            }
            return 57;
         }
         return -1;
      case 8:
         if ((active0 & 0x3000800000000L) != 0L || (active1 & 0x1c00000000000L) != 0L)
            return 110;
         if ((active0 & 0xd840237f0000000L) != 0L || (active1 & 0x4104013029500L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 8;
            }
            return 110;
         }
         return -1;
      case 9:
         if ((active1 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 8;
            }
            return 57;
         }
         if ((active0 & 0xc02000000000000L) != 0L || (active1 & 0x100000000000L) != 0L)
            return 110;
         if ((active0 & 0x1840237f0000000L) != 0L || (active1 & 0x4004013028500L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 9;
            return 110;
         }
         return -1;
      case 10:
         if ((active0 & 0x80022000000000L) != 0L)
            return 110;
         if ((active0 & 0x1040017f0000000L) != 0L || (active1 & 0x4004013029500L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 10;
            return 110;
         }
         return -1;
      case 11:
         if ((active0 & 0x104000200000000L) != 0L || (active1 & 0x4000001000400L) != 0L)
            return 110;
         if ((active0 & 0x15f0000000L) != 0L || (active1 & 0x4012029100L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 11;
            return 110;
         }
         return -1;
      case 12:
         if ((active1 & 0x2020000L) != 0L)
            return 110;
         if ((active0 & 0xc0000000L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 116;
               jjmatchedPos = 11;
            }
            return 57;
         }
         if ((active0 & 0x1530000000L) != 0L || (active1 & 0x4010009100L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 12;
            return 110;
         }
         return -1;
      case 13:
         if ((active1 & 0x8100L) != 0L)
            return 110;
         if ((active0 & 0x15f0000000L) != 0L || (active1 & 0x4010001000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 13;
            return 110;
         }
         return -1;
      case 14:
         if ((active0 & 0x420000000L) != 0L || (active1 & 0x10000000L) != 0L)
            return 110;
         if ((active0 & 0x11d0000000L) != 0L || (active1 & 0x4000001000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 14;
            return 110;
         }
         return -1;
      case 15:
         if ((active1 & 0x1000L) != 0L)
            return 110;
         if ((active0 & 0x11d0000000L) != 0L || (active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 15;
            return 110;
         }
         return -1;
      case 16:
         if ((active0 & 0x140000000L) != 0L)
            return 110;
         if ((active0 & 0x1090000000L) != 0L || (active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 16;
            return 110;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 18);
      case 41:
         return jjStopAtPos(0, 19);
      case 44:
         return jjStopAtPos(0, 15);
      case 45:
         jjmatchedKind = 23;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
      case 46:
         return jjStopAtPos(0, 14);
      case 58:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 26);
      case 60:
         return jjStopAtPos(0, 22);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x75000000000L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x780000000000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x7800000000000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x1d8000000000000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0xfe00000000000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x378L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x120000000L, 0x1f800L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0xc0000000L, 0x60000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x2600000000L, 0x1f80000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1e000000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x120000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fe00000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x810000000L, 0xc0000000000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x700000000000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800000000000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6000000000000L);
      case 91:
         return jjStopAtPos(0, 20);
      case 93:
         return jjStopAtPos(0, 21);
      case 123:
         return jjStopAtPos(0, 16);
      case 124:
         return jjStopAtPos(0, 25);
      case 125:
         return jjStopAtPos(0, 17);
      default :
         return jjMoveNfa_0(16, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 58:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1840000003c01L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x6600000000L, active1, 0x180000L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0xd8080010000000L, active1, 0x720000000L);
      case 70:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 86, 110);
         break;
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x100100000000000L, active1, 0x200080000c000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x38L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0xe00010000000000L, active1, 0x700000000340L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x72001e0000000L, active1, 0x30000L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0x800000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0x408001d000006L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3000000000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0xc000040000L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0xf000000000000000L, active1, 0L);
      case 89:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 46, 110);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 24);
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0x1020000000L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x840L);
      case 68:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 57, 110);
         return jjMoveStringLiteralDfa3_0(active0, 0x120000000L, active1, 0x10000L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0x4000000L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x58000000000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000000000L, active1, 0x40001000000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4700008000000L);
      case 74:
         return jjMoveStringLiteralDfa3_0(active0, 0x2600000000L, active1, 0x180000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40001L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000000L, active1, 0L);
      case 78:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x10000009000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0xa00000000000L, active1, 0x10000006L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000020000000000L, active1, 0x8000000038L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1802000000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x180004000000000L, active1, 0x500L);
      case 84:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 110);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 98, 110);
         return jjMoveStringLiteralDfa3_0(active0, 0xc4000000c0000000L, active1, 0x2000000a20200L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x80002000000L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000L);
      case 88:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 112);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0L);
      case 89:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 110);
         break;
      case 90:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0x1000000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10001000L);
      case 69:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 110);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 107, 110);
         return jjMoveStringLiteralDfa4_0(active0, 0xc400006600000000L, active1, 0x380200L);
      case 72:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 113, 110);
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x108800c0000000L, active1, 0x1802100820000L);
      case 74:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000L);
      case 76:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 110);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 93, 110);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000220000000000L, active1, 0x58L);
      case 77:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 110);
         return jjMoveStringLiteralDfa4_0(active0, 0x800040000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0x20L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x103000800000000L, active1, 0x8000000000L);
      case 81:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800L);
      case 83:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 106, 110);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x6000001L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000010000000L, active1, 0x4211000000500L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x120000000L, active1, 0x200018004L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0x400008000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0x2000400L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x44000000000000L, active1, 0x1810008001100L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x802600000000L, active1, 0x180000L);
      case 69:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 110);
         return jjMoveStringLiteralDfa5_0(active0, 0x800240000000000L, active1, 0x4404204000000L);
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0000000L, active1, 0x20000L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000020000000000L, active1, 0x18L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000120000000L, active1, 0x10000L);
      case 78:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 110);
         return jjMoveStringLiteralDfa5_0(active0, 0x4010004000000000L, active1, 0x2001000000L);
      case 79:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 110);
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000000000L, active1, 0x8000800000L);
      case 80:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 110);
         break;
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0xa480000000000000L, active1, 0x20L);
      case 83:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 109, 110);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100008000L);
      case 84:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 110);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000010000000L, active1, 0x101010000040L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0x4000000008000L);
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x100200010000000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x1004020000000000L, active1, 0x4010000008L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x40L);
      case 69:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 110);
         else if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10000120000000L, active1, 0x100000000210L);
      case 71:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 101, 110);
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000c0000000L, active1, 0x103020000L);
      case 76:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 110);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0x100L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x8003040000000000L, active1, 0x204800000L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0x408000000000L);
      case 83:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 100, 110);
         break;
      case 84:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 110);
         else if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x2000002e00000000L, active1, 0x1000008101020L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400L);
      case 88:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 104, 110);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x2720000000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x8800020000000000L, active1, 0x800000L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x10c0000000L, active1, 0x200020000L);
      case 68:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 110);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 110);
         break;
      case 69:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 91, 110);
         return jjMoveStringLiteralDfa7_0(active0, 0x3000000000000L, active1, 0x40L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0x1000000008008L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L, active1, 0x800000000100L);
      case 78:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 110);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100002000000L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100001000L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0x400L);
      case 82:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 110);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0L);
      case 83:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 61, 110);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 62, 110);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 69, 110);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 84, 110);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4400000000000L);
      case 84:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 110);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 90, 110);
         return jjMoveStringLiteralDfa7_0(active0, 0x4040000000000L, active1, 0xc010000000L);
      case 89:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000800000000L, active1, 0L);
      case 90:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x104000010000000L, active1, 0x4010000100L);
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x10c0000000L, active1, 0x400001020000L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400L);
      case 69:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 97, 110);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x900000000000L);
      case 70:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000L);
      case 71:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000420000000L, active1, 0L);
      case 76:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 63, 110);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 87, 110);
         break;
      case 78:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 96, 110);
         return jjMoveStringLiteralDfa8_0(active0, 0x3000000000000L, active1, 0x8000L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000L);
      case 83:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 110);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 110);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 103, 110);
         break;
      case 84:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 110);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 67, 110);
         return jjMoveStringLiteralDfa8_0(active0, 0x880022000000000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400L);
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000L, active1, 0x4000000000L);
      case 68:
         return jjMoveStringLiteralDfa9_0(active0, 0x420000000L, active1, 0L);
      case 69:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 35, 110);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L, active1, 0x100L);
      case 70:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000L);
      case 72:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x84020000000000L, active1, 0x2000000L);
      case 76:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 110, 110);
         break;
      case 78:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 112, 110);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000000L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L, active1, 0x10000000L);
      case 83:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 111, 110);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L, active1, 0x100000000000L);
      case 84:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x20000c0000000L, active1, 0x1020000L);
      case 89:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L, active1, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000L);
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000L, active1, 0x4000000000L);
      case 68:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 59, 110);
         break;
      case 69:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 58, 110);
         return jjMoveStringLiteralDfa10_0(active0, 0x420000000L, active1, 0x10000000L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000c0000000L, active1, 0x1028000L);
      case 77:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L, active1, 0x2000000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x80020210000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100L);
      case 83:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 49, 110);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 108, 110);
         break;
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000000400L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000000000000L);
      case 66:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 37, 110);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400L);
      case 70:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000L);
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000L);
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000000L);
      case 78:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 41, 110);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 55, 110);
         return jjMoveStringLiteralDfa11_0(active0, 0x100000430000000L, active1, 0x8000L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0xc0000000L, active1, 0x1020000L);
      case 80:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100L);
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000000000L);
      case 85:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 68:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(11, 74, 110);
         break;
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4010000000L);
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000L, active1, 0x8000L);
      case 76:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000L, active1, 0L);
      case 78:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(11, 88, 110);
         return jjMoveStringLiteralDfa12_0(active0, 0xc0000000L, active1, 0x20000L);
      case 79:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 50, 110);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100L);
      case 80:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(11, 33, 110);
         break;
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1000L);
      case 84:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 56, 110);
         return jjMoveStringLiteralDfa12_0(active0, 0x420000000L, active1, 0x2000000L);
      case 86:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000L, active1, 0L);
      case 88:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 114, 110);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa13_0(active0, 0xc0000000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x10000000L);
      case 69:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4000000000L);
      case 73:
         return jjMoveStringLiteralDfa13_0(active0, 0x520000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1000L);
      case 82:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100L);
      case 83:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(12, 81, 110);
         break;
      case 84:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8000L);
      case 89:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(12, 89, 110);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x4000000000L);
      case 83:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(13, 72, 110);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x10000000L);
      case 84:
         return jjMoveStringLiteralDfa14_0(active0, 0x460000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1000L);
      case 89:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(13, 79, 110);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 69:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(14, 92, 110);
         break;
      case 78:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x1000L);
      case 82:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000L, active1, 0x4000000000L);
      case 84:
         return jjMoveStringLiteralDfa15_0(active0, 0x1010000000L, active1, 0L);
      case 89:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(14, 29, 110);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(14, 34, 110);
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa16_0(active0, 0x100000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa16_0(active0, 0x1010000000L, active1, 0x4000000000L);
      case 79:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000000L, active1, 0L);
      case 83:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(15, 76, 110);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(16, 30, 110);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(16, 32, 110);
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000L, active1, 0x4000000000L);
      case 79:
         return jjMoveStringLiteralDfa17_0(active0, 0x10000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1);
      return 17;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(17, 28, 110);
         break;
      case 80:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(17, 31, 110);
         break;
      case 83:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 36, 110);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 102, 110);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 110;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if ((0x100002600L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 16:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     { jjCheckNAdd(22); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(0, 3); }
                  else if (curChar == 45)
                     { jjAddStates(4, 5); }
                  else if (curChar == 48)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  if (curChar == 45)
                     { jjCheckNAdd(32); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 24:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     { jjCheckNAdd(26); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 17:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 18:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 19:
                  if (curChar == 34 && kind > 11)
                     kind = 11;
                  break;
               case 20:
                  if (curChar == 48 && kind > 12)
                     kind = 12;
                  break;
               case 21:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAdd(22); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAdd(22); }
                  break;
               case 23:
                  if (curChar == 45)
                     { jjAddStates(4, 5); }
                  break;
               case 25:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(26); }
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(26); }
                  break;
               case 53:
                  if (curChar == 45)
                     { jjCheckNAdd(54); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  { jjCheckNAddTwoStates(53, 54); }
                  break;
               case 56:
                  if (curChar == 45)
                     { jjCheckNAdd(57); }
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 59:
                  if (curChar == 45)
                     { jjCheckNAdd(32); }
                  break;
               case 64:
                  if (curChar == 39)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 65:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(65, 67); }
                  break;
               case 67:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  break;
               case 69:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(32, 58); }
                  break;
               case 75:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 78:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 81:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 93:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 106:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 62:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 78)
                     { jjCheckNAdd(59); }
                  break;
               case 74:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 107;
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 104;
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 91;
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 79;
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 76;
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 60:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 88)
                     { jjCheckNAdd(59); }
                  break;
               case 40:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 13:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 49:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 71)
                  {
                     if (kind > 105)
                        kind = 105;
                  }
                  break;
               case 111:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 101;
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 41:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 14:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 74)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     { jjCheckNAddTwoStates(53, 54); }
                  }
                  if (curChar == 82)
                     { jjCheckNAddTwoStates(89, 102); }
                  else if (curChar == 80)
                     { jjAddStates(6, 11); }
                  else if (curChar == 77)
                     { jjAddStates(12, 13); }
                  else if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 50;
                  else if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 47;
                  else if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 12:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 42:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 15:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 38:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 50:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 110:
               case 57:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 88:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 100;
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 61:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 62;
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 84)
                     { jjAddStates(14, 15); }
                  break;
               case 112:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 46:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 39:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 31:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 47:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     { jjCheckNAddTwoStates(56, 57); }
                  }
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 2:
                  if (curChar == 82 && kind > 8)
                     kind = 8;
                  break;
               case 3:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 18:
                  { jjAddStates(16, 17); }
                  break;
               case 27:
                  if (curChar == 83 && kind > 39)
                     kind = 39;
                  break;
               case 28:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 32:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 83 && kind > 53)
                     kind = 53;
                  break;
               case 34:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 43:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 88 && kind > 71)
                     kind = 71;
                  break;
               case 45:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 48:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 51:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  { jjCheckNAddTwoStates(53, 54); }
                  break;
               case 54:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  { jjCheckNAddTwoStates(53, 54); }
                  break;
               case 55:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 58:
                  if (curChar == 77)
                     { jjAddStates(12, 13); }
                  break;
               case 63:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 66:
                  if (curChar == 66 && kind > 9)
                     kind = 9;
                  break;
               case 68:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(18, 19); }
                  break;
               case 70:
                  if ((0x10000000100L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 71:
                  if (curChar == 80)
                     { jjAddStates(6, 11); }
                  break;
               case 73:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 76:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 79:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 82:
                  if (curChar == 69 && kind > 94)
                     kind = 94;
                  break;
               case 83:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 89:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 82)
                     { jjCheckNAdd(89); }
                  break;
               case 91:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 92:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 94:
                  if (curChar == 83 && kind > 95)
                     kind = 95;
                  break;
               case 95:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 82)
                     { jjCheckNAdd(102); }
                  break;
               case 104:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 105:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 107:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 82)
                     { jjCheckNAddTwoStates(89, 102); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(16, 17); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 110 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(1, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if (curChar == 45 && kind > 6)
                     kind = 6;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   65, 67, 68, 69, 24, 25, 74, 77, 80, 92, 105, 108, 61, 63, 1, 11, 
   18, 19, 68, 69, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\56", "\54", "\173", "\175", "\50", "\51", "\133", "\135", "\74", "\55", 
"\72\72\75", "\174", "\73", "\72", 
"\124\105\130\124\125\101\114\55\103\117\116\126\105\116\124\111\117\116", "\115\117\104\125\114\105\55\111\104\105\116\124\111\124\131", 
"\116\117\124\111\106\111\103\101\124\111\117\116\55\124\131\120\105", "\116\117\124\111\106\111\103\101\124\111\117\116\55\107\122\117\125\120", 
"\115\117\104\125\114\105\55\103\117\115\120\114\111\101\116\103\105", "\117\102\112\105\103\124\55\107\122\117\125\120", 
"\117\102\112\105\103\124\55\111\104\105\116\124\111\124\131", "\124\122\101\120\55\124\131\120\105", 
"\101\107\105\116\124\55\103\101\120\101\102\111\114\111\124\111\105\123", "\117\102\112\105\103\124\55\124\131\120\105", "\101\102\123\105\116\124", 
null, "\101\116\131", "\101\120\120\114\111\103\101\124\111\117\116", 
"\101\125\107\115\105\116\124\123", "\102\105\107\111\116", "\102\111\124", "\102\117\117\114\105\101\116", 
"\102\131", "\103\110\117\111\103\105", "\103\117\115\120\117\116\105\116\124", 
"\103\117\115\120\117\116\105\116\124\123", "\103\117\116\124\101\103\124\55\111\116\106\117", 
"\104\105\106\101\125\114\124", "\104\105\106\111\116\105\104", null, "\104\105\106\126\101\114", 
"\104\105\123\103\122\111\120\124\111\117\116", "\104\111\123\120\114\101\131\55\110\111\116\124", "\105\116\104", 
"\105\116\124\105\122\120\122\111\123\105", "\105\116\125\115\105\122\101\124\105\104", 
"\105\130\120\114\111\103\111\124", "\105\130\120\117\122\124\123", "\105\130\124\105\116\104\123", 
"\105\130\124\105\122\116\101\114", "\106\101\114\123\105", "\106\122\117\115", "\107\122\117\125\120", 
"\111\115\120\114\111\103\111\124", "\111\115\120\114\111\105\104", "\111\115\120\117\122\124\123", 
"\111\116\103\114\125\104\105\123", null, "\111\116\123\124\101\114\114\55\105\122\122\117\122\123", 
"\111\116\124\105\107\105\122", "\114\101\123\124\55\125\120\104\101\124\105\104", "\115\101\103\122\117", 
"\115\101\116\104\101\124\117\122\131\55\107\122\117\125\120\123", "\115\101\130", "\115\111\116", 
"\115\111\116\125\123\55\111\116\106\111\116\111\124\131", "\115\117\104\125\114\105", 
"\116\117\124\111\106\111\103\101\124\111\117\116\123", "\116\125\114\114", "\117\102\112\105\103\124", 
"\117\102\112\105\103\124\123", "\117\103\124\105\124", "\117\106", "\117\120\124\111\117\116\101\114", 
"\117\122\107\101\116\111\132\101\124\111\117\116", "\120\114\125\123\55\111\116\106\111\116\111\124\131", 
"\120\122\105\123\105\116\124", "\120\122\111\126\101\124\105", 
"\120\122\117\104\125\103\124\55\122\105\114\105\101\123\105", "\122\105\101\114", null, null, "\122\105\126\111\123\111\117\116", 
"\123\105\121\125\105\116\103\105", "\123\105\124", "\123\111\132\105", "\123\124\101\124\125\123", 
"\123\124\122\111\116\107", "\123\125\102\112\105\103\124\55\103\101\124\105\107\117\122\111\105\123", 
"\123\125\120\120\117\122\124\123", "\123\131\116\124\101\130", null, "\124\101\107\123", "\124\122\125\105", 
"\125\116\111\121\125\105\116\105\123\123", "\125\116\111\124\123", "\125\116\111\126\105\122\123\101\114", 
"\126\101\122\111\101\102\114\105\123", "\126\101\122\111\101\124\111\117\116", "\127\111\124\110", 
"\127\122\111\124\105\55\123\131\116\124\101\130", null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public AsnParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public AsnParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
	
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 110; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit( SimpleCharStream stream, int lexState)
  {
  
    ReInit( stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "WithinASNComment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0x1fffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x60L, 0x0L, 
};
static final long[] jjtoMore = {
   0x80L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[110];
    private final int[] jjstateSet = new int[2 * 110];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected int curChar;
}
