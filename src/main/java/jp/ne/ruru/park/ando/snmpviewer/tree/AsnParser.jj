package jp.ne.ruru.park.ando.snmpviewer.tree;


/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. AsnParser.jj */
/*@egen*//**
 *
 *  ASN.1 grammar  for JavaCC
 *
 *  Contributed by Helena Sarin (hsarin@lucent.com)
 *  Contributed by Toshikazu Ando (foobar.em.boo.jp)
 *
 *  Derived in part from the following work: snacc - a freeware ASN.1 to C or C++ compiler, v 1.3,
 *  yacc/lex source code ( parse-asn1.y, lex-asn1.l), 
 *  the free software, which is covered by GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or later
 *
 * hsarin said...
 *  I tested it against several ASN.1 files used by CMIP;
 *  Additional work is reguired to fully support SNMP MIBs parsing
 *   
 *  Please let me know if you use this grammar: i'm using it to develop ASN.1/IDL compiler
 *  
 * Ando said...
 *  I tested it against several ASN.1 files used by Wireshark(*1).
 * (*1) https://www.wireshark.org/
 */

options {
    STATIC=false;
               
                 
    SANITY_CHECK=true;
    DEBUG_PARSER=false;
    DEBUG_TOKEN_MANAGER=false;
}

PARSER_BEGIN(AsnParser)

/**
 *
 *  ASN.1 grammar  for JavaCC
 *
 *  Contributed by Helena Sarin (hsarin@lucent.com)
 *  Contributed by Toshikazu Ando (foobar.em.boo.jp)
 *
 *  Derived in part from the following work: snacc - a freeware ASN.1 to C or C++ compiler, v 1.3,
 *  yacc/lex source code ( parse-asn1.y, lex-asn1.l), 
 *  the free software, which is covered by GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or later
 */
public class AsnParser/*@bgen(jjtree)*/implements AsnParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTAsnParserState jjtree = new JJTAsnParserState();

/*@egen*/
}

PARSER_END(AsnParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

SPECIAL_TOKEN :
{
  "--" : WithinASNComment
}

<WithinASNComment> SPECIAL_TOKEN :
{
  <("--" | "\n" | "\r" | "\r\n" )> : DEFAULT
}

<WithinASNComment> MORE :
{
  <~[]>
}

TOKEN : 
{
 <OBJECT_IDENTIFIER_TKN: "OBJECT" ([" ","\n","\t","\r"])? "IDENTIFIER">
}

TOKEN : 
{
 <BSTRING_TKN: "\'" (["0"-"1"])* "\'B">
}

TOKEN : 
{
 <HSTRING_TKN: "\'" (["0"-"9","A"-"F","a"-"f"])* "\'" ["H","h"]>
}

TOKEN : 
{
 <CSTRING_TKN: "\"" ( ~["\""] )* "\"" >
}

TOKEN : 
{
 <PLUS_NUMBER_TKN: ("0" | ["1"-"9"](["0"-"9"])*)>
}

TOKEN : 
{
 <MINUS_NUMBER_TKN: "-" ("0" | ["1"-"9"](["0"-"9"])*)>
}

TOKEN :
{
  <DOT_TKN: ".">
| <COMMA_TKN: ",">
| <LEFTBRACE_TKN: "{">
| <RIGHTBRACE_TKN: "}">
| <LEFTPAREN_TKN: "(">
| <RIGHTPAREN_TKN: ")">
| <LEFTBRACKET_TKN: "[">
| <RIGHTBRACKET_TKN: "]">
| <LESSTHAN_TKN: "<">
| <MINUS_TKN: "-">
| <GETS_TKN: "::=">
| <BAR_TKN: "|">
| <SEMI_COLON_TKN: ";">
| <SELECTOR_TKN: ":">

| <TC_TKN: "TEXTUAL-CONVENTION"> 
| <MI_TKN: "MODULE-IDENTITY"> 
| <NT_TKN: "NOTIFICATION-TYPE">
| <NG_TKN: "NOTIFICATION-GROUP">
| <MC_TKN: "MODULE-COMPLIANCE">
| <OG_TKN: "OBJECT-GROUP">
| <OI_TKN: "OBJECT-IDENTITY">
| <TT_TKN: "TRAP-TYPE">
| <AC_TKN: "AGENT-CAPABILITIES">
| <OBJECTTYPE_TKN: "OBJECT-TYPE">

| <ABSENT_TKN: "ABSENT">
| <ACCESS_TKN: ("PIB-")? ("MAX-"|"MIN-")? "ACCESS">
| <ANY_TKN: "ANY">
| <APPLICATION_TKN: "APPLICATION">
| <AUGMENTS_TKN: "AUGMENTS">
| <BEGIN_TKN: "BEGIN">
| <BIT_TKN: "BIT">
| <BOOLEAN_TKN: "BOOLEAN">
| <BY_TKN: "BY">
| <CHOICE_TKN: "CHOICE">
| <COMPONENT_TKN: "COMPONENT">
| <COMPONENTS_TKN: "COMPONENTS">
| <CONTACT_INFO_TKN: "CONTACT-INFO">
| <DEFAULT_TKN: "DEFAULT">
| <DEFINED_TKN: "DEFINED">
| <DEFINITIONS_TKN: ("PIB-")? "DEFINITIONS">
| <DEFVAL_TKN: "DEFVAL">
| <DESCRIPTION_TKN: "DESCRIPTION">
| <DHINT: "DISPLAY-HINT">
| <END_TKN: "END">
| <ENTERPRISE_TKN: "ENTERPRISE">
| <ENUMERATED_TKN: "ENUMERATED">
| <EXPLICIT_TKN: "EXPLICIT">
| <EXPORTS_TKN: "EXPORTS">
| <EXTENDS_TKN: "EXTENDS">
| <EXTERNAL_TKN: "EXTERNAL">
| <FALSE_TKN: "FALSE">
| <FROM_TKN: "FROM">
| <GROUP_TKN: "GROUP">
| <IMPLICIT_TKN: "IMPLICIT">
| <IMPLIED_TKN: "IMPLIED">
| <IMPORTS_TKN: "IMPORTS">
| <INCLUDES_TKN: "INCLUDES">
| <INDEX_TKN: ("PIB-")? "INDEX">
| <INSTALL_ERRORS_TKN: "INSTALL-ERRORS">
| <INTEGER_TKN: "INTEGER">
| <LAST_UPDATED_TKN: "LAST-UPDATED"> 
| <MACRO_TKN: "MACRO"> 
| <MANDATORY_GROUPS_TKN: "MANDATORY-GROUPS">
| <MAX_TKN: "MAX">
| <MIN_TKN: "MIN">
| <MINUS_INFINITY_TKN: "MINUS-INFINITY">
| <MODULE_TKN: "MODULE">
| <NOTIFICATIONS_TKN: "NOTIFICATIONS">
| <NULL_TKN: "NULL">
| <OBJECT_TKN: "OBJECT">
| <OBJECTS_TKN: "OBJECTS">
| <OCTET_TKN: "OCTET">
| <OF_TKN: "OF">
| <OPTIONAL_TKN: "OPTIONAL">
| <ORGANIZATION_TKN: "ORGANIZATION"> 
| <PLUS_INFINITY_TKN: "PLUS-INFINITY">
| <PRESENT_TKN: "PRESENT">
| <PRIVATE_TKN: "PRIVATE">
| <PRODUCT_RELEASE_TKN: "PRODUCT-RELEASE">
| <REAL_TKN: "REAL">
| <REFERENCE_TKN:  ("PIB-")? "REFERENCE">
| <REFERENCES_TKN: ("PIB-")? "REFERENCES">
| <REVISION_TKN: "REVISION">
| <SEQUENCE_TKN: "SEQUENCE">
| <SET_TKN: "SET">
| <SIZE_TKN: "SIZE">
| <STATUS_TKN: "STATUS">
| <STRING_TKN: "STRING">
| <SUBJECT_CATEGORIES_TKN: "SUBJECT-CATEGORIES"> 
| <SUPPORTS_TKN: "SUPPORTS">
| <SYNTAX_TKN: "SYNTAX">
| <TAG_TKN: ("PIB-")? "TAG">
| <TAGS_TKN: "TAGS">
| <TRUE_TKN: "TRUE">
| <UNIQUENESS_TKN: "UNIQUENESS">
| <UNITS_TKN: "UNITS">
| <UNIVERSAL_TKN: "UNIVERSAL">
| <VARIABLES_TKN: "VARIABLES">
| <VARIATION_TKN: "VARIATION">
| <WITH_TKN: "WITH">
| <WRITE_SYNTAX_TKN: "WRITE-SYNTAX">
}

TOKEN : 
{
  <LCASEFIRST_IDENT_TKN: ["a"-"z"] (("-"["a"-"z","A"-"Z","0"-"9"])|["a"-"z","A"-"Z","0"-"9"])*>
}


TOKEN : 
{
  <UCASEFIRST_IDENT_TKN: ["A"-"Z"](("-"["a"-"z","A"-"Z","0"-"9"])|["a"-"z","A"-"Z","0"-"9"])*>
}

ASTInput Input() : {/*@bgen(jjtree) Input */
  ASTInput jjtn000 = new ASTInput(JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Input */
  try {
/*@egen*/ 
  (ModuleDefinition())*/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/  {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ModuleDefinition() : {/*@bgen(jjtree) ModuleDefinition */
  ASTModuleDefinition jjtn000 = new ASTModuleDefinition(JJTMODULEDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ModuleDefinition */
  try {
/*@egen*/ 
  ModuleIdentifier() <DEFINITIONS_TKN> [TagDefault()] <GETS_TKN> <BEGIN_TKN> ModuleBody() <END_TKN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void TagDefault() : {/*@bgen(jjtree) TagDefault */
  ASTTagDefault jjtn000 = new ASTTagDefault(JJTTAGDEFAULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) TagDefault */
  try {
/*@egen*/     
  (<EXPLICIT_TKN> |  <IMPLICIT_TKN> ) <TAGS_TKN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void ModuleIdentifier() : {/*@bgen(jjtree) ModuleIdentifier */
  ASTModuleIdentifier jjtn000 = new ASTModuleIdentifier(JJTMODULEIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  } 
{/*@bgen(jjtree) ModuleIdentifier */
  try {
/*@egen*/ 
  modulereference() [AssignedIdentifier()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AssignedIdentifier() : {/*@bgen(jjtree) AssignedIdentifier */
  ASTAssignedIdentifier jjtn000 = new ASTAssignedIdentifier(JJTASSIGNEDIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) AssignedIdentifier */
  try {
/*@egen*/ 
  ObjectIdentifierValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void ModuleBody() : {/*@bgen(jjtree) ModuleBody */
  ASTModuleBody jjtn000 = new ASTModuleBody(JJTMODULEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ModuleBody */
  try {
/*@egen*/ 
  [Exports()] [Imports()] [AssignmentList()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void Exports() : {/*@bgen(jjtree) Exports */
  ASTExports jjtn000 = new ASTExports(JJTEXPORTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Exports */
  try {
/*@egen*/ 
  <EXPORTS_TKN> [SymbolsExported()] <SEMI_COLON_TKN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void SymbolsExported() : {/*@bgen(jjtree) SymbolsExported */
  ASTSymbolsExported jjtn000 = new ASTSymbolsExported(JJTSYMBOLSEXPORTED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SymbolsExported */
   try {
/*@egen*/ 
   ExportSymbolList()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void ExportSymbolList() : {/*@bgen(jjtree) ExportSymbolList */
  ASTExportSymbolList jjtn000 = new ASTExportSymbolList(JJTEXPORTSYMBOLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ExportSymbolList */
   try {
/*@egen*/ 
   Symbol() (<COMMA_TKN> Symbol())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Imports() : {/*@bgen(jjtree) Imports */
  ASTImports jjtn000 = new ASTImports(JJTIMPORTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Imports */
   try {
/*@egen*/ 
   <IMPORTS_TKN> [SymbolsImported()] <SEMI_COLON_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SymbolsImported() : {/*@bgen(jjtree) SymbolsImported */
  ASTSymbolsImported jjtn000 = new ASTSymbolsImported(JJTSYMBOLSIMPORTED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SymbolsImported */
   try {
/*@egen*/ 
   SymbolsFromModuleList()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SymbolsFromModuleList() : {/*@bgen(jjtree) SymbolsFromModuleList */
  ASTSymbolsFromModuleList jjtn000 = new ASTSymbolsFromModuleList(JJTSYMBOLSFROMMODULELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SymbolsFromModuleList */
   try {
/*@egen*/ 
   SymbolsFromModule() (SymbolsFromModule())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void SymbolsFromModule() : {/*@bgen(jjtree) SymbolsFromModule */
                             ASTSymbolsFromModule jjtn000 = new ASTSymbolsFromModule(JJTSYMBOLSFROMMODULE);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/ String module; } 
{/*@bgen(jjtree) SymbolsFromModule */
   try {
/*@egen*/ 
   SymbolList() <FROM_TKN>  ModuleIdentifier()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SymbolList() : {/*@bgen(jjtree) SymbolList */
  ASTSymbolList jjtn000 = new ASTSymbolList(JJTSYMBOLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SymbolList */
   try {
/*@egen*/ 
   Symbol() (<COMMA_TKN> Symbol())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void Symbol() : {/*@bgen(jjtree) Symbol */
  ASTSymbol jjtn000 = new ASTSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Symbol */
   try {
/*@egen*/ 
   typereference()
 | identifier() 
 | DefinedMacroName()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void AssignmentList() : {/*@bgen(jjtree) AssignmentList */
  ASTAssignmentList jjtn000 = new ASTAssignmentList(JJTASSIGNMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) AssignmentList */
  try {
/*@egen*/ 
  Assignment() [<SEMI_COLON_TKN>] ( Assignment() [<SEMI_COLON_TKN>] )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Assignment() : {/*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Assignment */
   try {
/*@egen*/ 
   LOOKAHEAD(2)  MacroDefinition() |  TypeAssignment() |  ValueAssignment()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void MacroDefinition() : {/*@bgen(jjtree) MacroDefinition */
  ASTMacroDefinition jjtn000 = new ASTMacroDefinition(JJTMACRODEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } 
{/*@bgen(jjtree) MacroDefinition */
   try {
/*@egen*/
   (DefinedMacroName() | typereference())
    <MACRO_TKN> <GETS_TKN> 
    <BEGIN_TKN>  MacroBody() <END_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

JAVACODE
void MacroBody() {/*@bgen(jjtree) MacroBody */
 ASTMacroBody jjtn000 = new ASTMacroBody(JJTMACROBODY);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {
/*@egen*/    
    Token tok;
    int nesting = 1;
    while (true) {
        tok = getToken(1);
        if (tok.kind == END_TKN) {
            break;    
        }
        tok = getNextToken();
    }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void MacroReference() : {/*@bgen(jjtree) MacroReference */
  ASTMacroReference jjtn000 = new ASTMacroReference(JJTMACROREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) MacroReference */
   try {
/*@egen*/ 
   typereference() | DefinedMacroName()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void TypeAssignment() : {/*@bgen(jjtree) TypeAssignment */
  ASTTypeAssignment jjtn000 = new ASTTypeAssignment(JJTTYPEASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) TypeAssignment */
   try {
/*@egen*/
   typereference() <GETS_TKN> GlobalType()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Type() : {/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Type */
   try {
/*@egen*/ 
   (LOOKAHEAD(2) BuiltinType() |  DefinedType())  [LOOKAHEAD(2) SubtypeSpec()]/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void GlobalType() : {/*@bgen(jjtree) GlobalType */
  ASTGlobalType jjtn000 = new ASTGlobalType(JJTGLOBALTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) GlobalType */
      try {
/*@egen*/
      Type()
    | TextualConventionMacroType() 
    | ModuleIdentityMacroType() 
    | NotificationTypeMacroType()
    | NotificationGroupMacroType()
    | ModuleComplianceMacroType()
    | ObjecGroupMacroType()
    | ObjecIdentityMacroType()
    | TrapTypeMacroType()
    | AgentCapabilitiesMacroType()
    | ObjectTypeMacroType()/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}
void DefinedMacroName() : {/*@bgen(jjtree) DefinedMacroName */
  ASTDefinedMacroName jjtn000 = new ASTDefinedMacroName(JJTDEFINEDMACRONAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) DefinedMacroName */
     try {
/*@egen*/
     <TC_TKN>
    | <MI_TKN>
    | <NT_TKN>
    | <NG_TKN>
    | <MC_TKN>
    | <OG_TKN>
    | <OI_TKN>
    | <TT_TKN>
    | <AC_TKN>
    | <OBJECTTYPE_TKN>/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/ 
}

void DefinedType() : {/*@bgen(jjtree) DefinedType */
  ASTDefinedType jjtn000 = new ASTDefinedType(JJTDEFINEDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } 
{/*@bgen(jjtree) DefinedType */
  try {
/*@egen*/  
  [LOOKAHEAD(2) modulereference() <DOT_TKN>]
  typereference() [<LEFTBRACE_TKN> NamedNumberList() <RIGHTBRACE_TKN> ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void BuiltinType() : {/*@bgen(jjtree) BuiltinType */
  ASTBuiltinType jjtn000 = new ASTBuiltinType(JJTBUILTINTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) BuiltinType */
  try {
/*@egen*/ 
  IntegerType() 
| BitStringType() 
| LOOKAHEAD(2) SetOrSequenceType()
| SetOrSequenceOfType()
| ChoiceType() 
| SelectionType() 
| TaggedType() 
| AnyType() 
| EnumeratedType() 
| OctetStringType()
| ObjectIdentiferType() 
| RealType()
| BooleanType()
| NullType()
| ExternalType()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OctetStringType() : {/*@bgen(jjtree) OctetStringType */
  ASTOctetStringType jjtn000 = new ASTOctetStringType(JJTOCTETSTRINGTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) OctetStringType */
  try {
/*@egen*/
  <OCTET_TKN> <STRING_TKN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void ObjectIdentiferType() : {/*@bgen(jjtree) ObjectIdentiferType */
  ASTObjectIdentiferType jjtn000 = new ASTObjectIdentiferType(JJTOBJECTIDENTIFERTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ObjectIdentiferType */
  try {
/*@egen*/
  <OBJECT_IDENTIFIER_TKN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void RealType() : {/*@bgen(jjtree) RealType */
  ASTRealType jjtn000 = new ASTRealType(JJTREALTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) RealType */
  try {
/*@egen*/
  <REAL_TKN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void BooleanType() : {/*@bgen(jjtree) BooleanType */
  ASTBooleanType jjtn000 = new ASTBooleanType(JJTBOOLEANTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) BooleanType */
  try {
/*@egen*/
  <BOOLEAN_TKN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void NullType() : {/*@bgen(jjtree) NullType */
  ASTNullType jjtn000 = new ASTNullType(JJTNULLTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) NullType */
  try {
/*@egen*/
  <NULL_TKN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void ExternalType() : {/*@bgen(jjtree) ExternalType */
  ASTExternalType jjtn000 = new ASTExternalType(JJTEXTERNALTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ExternalType */
  try {
/*@egen*/
  <EXTERNAL_TKN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void EnumeratedType() : {/*@bgen(jjtree) EnumeratedType */
  ASTEnumeratedType jjtn000 = new ASTEnumeratedType(JJTENUMERATEDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) EnumeratedType */
   try {
/*@egen*/ 
   <ENUMERATED_TKN> <LEFTBRACE_TKN> NamedNumberList() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void IntegerType() : {/*@bgen(jjtree) IntegerType */
  ASTIntegerType jjtn000 = new ASTIntegerType(JJTINTEGERTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) IntegerType */
 try {
/*@egen*/ 
 <INTEGER_TKN> [ <LEFTBRACE_TKN> NamedNumberList() <RIGHTBRACE_TKN> ]/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void BitStringType() : {/*@bgen(jjtree) BitStringType */
  ASTBitStringType jjtn000 = new ASTBitStringType(JJTBITSTRINGTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) BitStringType */
  try {
/*@egen*/ 
  <BIT_TKN> <STRING_TKN> [ <LEFTBRACE_TKN> NamedNumberList()  <RIGHTBRACE_TKN> ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}


void SetOrSequenceOfType() : {/*@bgen(jjtree) SetOrSequenceOfType */
  ASTSetOrSequenceOfType jjtn000 = new ASTSetOrSequenceOfType(JJTSETORSEQUENCEOFTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) SetOrSequenceOfType */
   try {
/*@egen*/ 
   ( <SET_TKN> | <SEQUENCE_TKN> ) [[<LEFTPAREN_TKN>] SizeConstraint() [<RIGHTPAREN_TKN>]] <OF_TKN> 
    Type()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void ChoiceType() : {/*@bgen(jjtree) ChoiceType */
  ASTChoiceType jjtn000 = new ASTChoiceType(JJTCHOICETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } 
{/*@bgen(jjtree) ChoiceType */
   try {
/*@egen*/ 
   <CHOICE_TKN> <LEFTBRACE_TKN> ElementTypeList() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SetOrSequenceType() : {/*@bgen(jjtree) SetOrSequenceType */
  ASTSetOrSequenceType jjtn000 = new ASTSetOrSequenceType(JJTSETORSEQUENCETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } 
{/*@bgen(jjtree) SetOrSequenceType */
  try {
/*@egen*/ 
  (<SET_TKN> | <SEQUENCE_TKN>) <LEFTBRACE_TKN> [ ElementTypeList() ] <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void SelectionType() : {/*@bgen(jjtree) SelectionType */
  ASTSelectionType jjtn000 = new ASTSelectionType(JJTSELECTIONTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SelectionType */
   try {
/*@egen*/ 
   identifier() <LESSTHAN_TKN> Type()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}
void TaggedType() : {/*@bgen(jjtree) TaggedType */
  ASTTaggedType jjtn000 = new ASTTaggedType(JJTTAGGEDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } 
{/*@bgen(jjtree) TaggedType */
  try {
/*@egen*/ 
  Tag() [ <EXPLICIT_TKN> | <IMPLICIT_TKN> ] Type()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}
void Tag() : {/*@bgen(jjtree) Tag */
  ASTTag jjtn000 = new ASTTag(JJTTAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Tag */
   try {
/*@egen*/ 
   <LEFTBRACKET_TKN> [Class()] ClassNumber() <RIGHTBRACKET_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void AnyType() : {/*@bgen(jjtree) AnyType */
  ASTAnyType jjtn000 = new ASTAnyType(JJTANYTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) AnyType */
  try {
/*@egen*/ 
  <ANY_TKN> [ <DEFINED_TKN> <BY_TKN> identifier()   ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void NamedNumberList() : {/*@bgen(jjtree) NamedNumberList */
  ASTNamedNumberList jjtn000 = new ASTNamedNumberList(JJTNAMEDNUMBERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  } 
{/*@bgen(jjtree) NamedNumberList */
  try {
/*@egen*/ 
  NamedNumber() (<COMMA_TKN> NamedNumber())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void NamedNumber() : {/*@bgen(jjtree) NamedNumber */
  ASTNamedNumber jjtn000 = new ASTNamedNumber(JJTNAMEDNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } 
{/*@bgen(jjtree) NamedNumber */
  try {
/*@egen*/ 
  identifier()
  <LEFTPAREN_TKN> (SignedNumber() | DefinedValue()) <RIGHTPAREN_TKN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void SignedNumber() : {/*@bgen(jjtree) SignedNumber */
    ASTSignedNumber jjtn000 = new ASTSignedNumber(JJTSIGNEDNUMBER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) SignedNumber */
     try {
/*@egen*/ 
     t = <PLUS_NUMBER_TKN>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/  { jjtn000.value = t;}
   | t = <MINUS_NUMBER_TKN>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void ElementTypeList() : {/*@bgen(jjtree) ElementTypeList */
  ASTElementTypeList jjtn000 = new ASTElementTypeList(JJTELEMENTTYPELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ElementTypeList */
   try {
/*@egen*/ 
   ElementType() (<COMMA_TKN> ElementType())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void ElementType() : {/*@bgen(jjtree) ElementType */
  ASTElementType jjtn000 = new ASTElementType(JJTELEMENTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ElementType */
  try {
/*@egen*/ 
  ( NamedType()  [ ( <OPTIONAL_TKN> ) | ( <DEFAULT_TKN> NamedValue() ) ] )
| ComponentsType()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ComponentsType() : {/*@bgen(jjtree) ComponentsType */
  ASTComponentsType jjtn000 = new ASTComponentsType(JJTCOMPONENTSTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  }
{/*@bgen(jjtree) ComponentsType */
  try {
/*@egen*/
  <COMPONENTS_TKN> <OF_TKN>  Type()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 

}

void NamedType() : {/*@bgen(jjtree) NamedType */
  ASTNamedType jjtn000 = new ASTNamedType(JJTNAMEDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } 
{/*@bgen(jjtree) NamedType */
  try {
/*@egen*/ 
  [LOOKAHEAD(2) identifier()]  Type()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void ClassNumber() : {/*@bgen(jjtree) ClassNumber */
  ASTClassNumber jjtn000 = new ASTClassNumber(JJTCLASSNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ClassNumber */
   try {
/*@egen*/ 
   number() | DefinedValue()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void Class() : {/*@bgen(jjtree) Class */
  ASTClass jjtn000 = new ASTClass(JJTCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Class */
   try {
/*@egen*/ 
   <UNIVERSAL_TKN> | <APPLICATION_TKN> | <PRIVATE_TKN>/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SubtypeSpec() : {/*@bgen(jjtree) SubtypeSpec */
  ASTSubtypeSpec jjtn000 = new ASTSubtypeSpec(JJTSUBTYPESPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SubtypeSpec */
   try {
/*@egen*/ 
   <LEFTPAREN_TKN> SubtypeValueSetList() <RIGHTPAREN_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SubtypeValueSetList() : {/*@bgen(jjtree) SubtypeValueSetList */
  ASTSubtypeValueSetList jjtn000 = new ASTSubtypeValueSetList(JJTSUBTYPEVALUESETLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SubtypeValueSetList */
   try {
/*@egen*/ 
   SubtypeValueSet() (<BAR_TKN> SubtypeValueSet())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SubtypeValueSet() : {/*@bgen(jjtree) SubtypeValueSet */
  ASTSubtypeValueSet jjtn000 = new ASTSubtypeValueSet(JJTSUBTYPEVALUESET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SubtypeValueSet */
 try {
/*@egen*/ 
 (
  ValueRange() | ContainedSubtype() | PermittedAlphabet() | SizeConstraint() | InnerTypeConstraints() )/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}


void ContainedSubtype() : {/*@bgen(jjtree) ContainedSubtype */
  ASTContainedSubtype jjtn000 = new ASTContainedSubtype(JJTCONTAINEDSUBTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ContainedSubtype */
   try {
/*@egen*/ 
   <INCLUDES_TKN> Type()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SingleValue() : {/*@bgen(jjtree) SingleValue */
  ASTSingleValue jjtn000 = new ASTSingleValue(JJTSINGLEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SingleValue */
   try {
/*@egen*/ 
   Value()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void ValueRange() : {/*@bgen(jjtree) ValueRange */
  ASTValueRange jjtn000 = new ASTValueRange(JJTVALUERANGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ValueRange */
 try {
/*@egen*/ 
 ( Value() | <MIN_TKN> ) [ [ <LESSTHAN_TKN> ]  <DOT_TKN> <DOT_TKN> [ <LESSTHAN_TKN> ] (Value() | <MAX_TKN> ) ]/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void SizeConstraint() : {/*@bgen(jjtree) SizeConstraint */
  ASTSizeConstraint jjtn000 = new ASTSizeConstraint(JJTSIZECONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SizeConstraint */
   try {
/*@egen*/ 
   <SIZE_TKN> SubtypeSpec()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void PermittedAlphabet() : {/*@bgen(jjtree) PermittedAlphabet */
  ASTPermittedAlphabet jjtn000 = new ASTPermittedAlphabet(JJTPERMITTEDALPHABET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) PermittedAlphabet */
   try {
/*@egen*/ 
   <FROM_TKN> SubtypeSpec()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void InnerTypeConstraints() : {/*@bgen(jjtree) InnerTypeConstraints */
  ASTInnerTypeConstraints jjtn000 = new ASTInnerTypeConstraints(JJTINNERTYPECONSTRAINTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) InnerTypeConstraints */
  try {
/*@egen*/ 
  <WITH_TKN> ((<COMPONENT_TKN> SingleTypeConstraint() ) | ( <COMPONENTS_TKN>  MultipleTypeConstraints()))/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SingleTypeConstraint() : {/*@bgen(jjtree) SingleTypeConstraint */
  ASTSingleTypeConstraint jjtn000 = new ASTSingleTypeConstraint(JJTSINGLETYPECONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SingleTypeConstraint */
   try {
/*@egen*/ 
   SubtypeSpec()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void MultipleTypeConstraints() : {/*@bgen(jjtree) MultipleTypeConstraints */
  ASTMultipleTypeConstraints jjtn000 = new ASTMultipleTypeConstraints(JJTMULTIPLETYPECONSTRAINTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) MultipleTypeConstraints */
  try {
/*@egen*/ 
  <LEFTBRACE_TKN> [ <DOT_TKN> <DOT_TKN> <DOT_TKN> <COMMA_TKN> ] TypeConstraints() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void TypeConstraints() : {/*@bgen(jjtree) TypeConstraints */
  ASTTypeConstraints jjtn000 = new ASTTypeConstraints(JJTTYPECONSTRAINTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) TypeConstraints */
   try {
/*@egen*/ 
   NamedConstraint() (<COMMA_TKN> NamedConstraint())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void NamedConstraint() : {/*@bgen(jjtree) NamedConstraint */
  ASTNamedConstraint jjtn000 = new ASTNamedConstraint(JJTNAMEDCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) NamedConstraint */
    try {
/*@egen*/ 
    [identifier() ] Constraint()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void Constraint() : {/*@bgen(jjtree) Constraint */
  ASTConstraint jjtn000 = new ASTConstraint(JJTCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Constraint */
  try {
/*@egen*/ 
  [ValueConstraint()] [PresenceConstraint()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void ValueConstraint() : {/*@bgen(jjtree) ValueConstraint */
  ASTValueConstraint jjtn000 = new ASTValueConstraint(JJTVALUECONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ValueConstraint */
   try {
/*@egen*/ 
   SubtypeSpec()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void PresenceConstraint() : {/*@bgen(jjtree) PresenceConstraint */
  ASTPresenceConstraint jjtn000 = new ASTPresenceConstraint(JJTPRESENCECONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) PresenceConstraint */
   try {
/*@egen*/ 
   <PRESENT_TKN> | <ABSENT_TKN> | <OPTIONAL_TKN>/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}
void ValueAssignment() : {/*@bgen(jjtree) ValueAssignment */
  ASTValueAssignment jjtn000 = new ASTValueAssignment(JJTVALUEASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } 
{/*@bgen(jjtree) ValueAssignment */
    try {
/*@egen*/     
    identifier() GlobalType() <GETS_TKN> [ LOOKAHEAD(2) identifier() [<SELECTOR_TKN>] ] [  BuiltinValue() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Value() : {/*@bgen(jjtree) Value */
  ASTValue jjtn000 = new ASTValue(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Value */
   try {
/*@egen*/ 
   LOOKAHEAD(2) BuiltinValue() | DefinedValue()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void DefinedValue() : {/*@bgen(jjtree) DefinedValue */
  ASTDefinedValue jjtn000 = new ASTDefinedValue(JJTDEFINEDVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) DefinedValue */
 try {
/*@egen*/ 
 [ modulereference() <DOT_TKN> ] identifier()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void BuiltinValue() : {/*@bgen(jjtree) BuiltinValue */
  ASTBuiltinValue jjtn000 = new ASTBuiltinValue(JJTBUILTINVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) BuiltinValue */
   try {
/*@egen*/ 
   BooleanValue() 
| NullValue() 
| SpecialRealValue() 
| SignedNumber() 
| HexString() 
| BinaryString() 
| CharString() 
| CompoundValue()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void CompoundValue() : {/*@bgen(jjtree) CompoundValue */
  ASTCompoundValue jjtn000 = new ASTCompoundValue(JJTCOMPOUNDVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompoundValue */
   try {
/*@egen*/
   <LEFTBRACE_TKN> ( ObjIdComponentList() | skip_to_matching_brace() ) <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

JAVACODE
void skip_to_matching_brace() {/*@bgen(jjtree) skip_to_matching_brace */
 ASTskip_to_matching_brace jjtn000 = new ASTskip_to_matching_brace(JJTSKIP_TO_MATCHING_BRACE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {
/*@egen*/
    Token tok;
    int nesting = 1;
    while (true) {
        tok = getToken(1);
        if (tok.kind == LEFTBRACE_TKN) {
            nesting++;
            }
        if (tok.kind == RIGHTBRACE_TKN) {
            nesting--;
            if (nesting == 0) {
                break;
            }
        }
        tok = getNextToken();
    }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void BooleanValue() : {/*@bgen(jjtree) BooleanValue */
  ASTBooleanValue jjtn000 = new ASTBooleanValue(JJTBOOLEANVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) BooleanValue */
   try {
/*@egen*/ 
   <TRUE_TKN> | <FALSE_TKN>/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SpecialRealValue() : {/*@bgen(jjtree) SpecialRealValue */
  ASTSpecialRealValue jjtn000 = new ASTSpecialRealValue(JJTSPECIALREALVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SpecialRealValue */
   try {
/*@egen*/ 
   <PLUS_INFINITY_TKN> | <MINUS_INFINITY_TKN>/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void NullValue() : {/*@bgen(jjtree) NullValue */
  ASTNullValue jjtn000 = new ASTNullValue(JJTNULLVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) NullValue */
   try {
/*@egen*/ 
   <NULL_TKN>/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void NamedValue() : {/*@bgen(jjtree) NamedValue */
  ASTNamedValue jjtn000 = new ASTNamedValue(JJTNAMEDVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) NamedValue */
  try {
/*@egen*/ 
  [ LOOKAHEAD(2) identifier() ] Value()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void ObjectIdentifierValue() : {/*@bgen(jjtree) ObjectIdentifierValue */
  ASTObjectIdentifierValue jjtn000 = new ASTObjectIdentifierValue(JJTOBJECTIDENTIFIERVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ObjectIdentifierValue */
   try {
/*@egen*/ 
   <LEFTBRACE_TKN> ObjIdComponentList() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void ObjIdComponentList() : {/*@bgen(jjtree) ObjIdComponentList */
  ASTObjIdComponentList jjtn000 = new ASTObjIdComponentList(JJTOBJIDCOMPONENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ObjIdComponentList */
   try {
/*@egen*/ 
   ObjIdComponent() (ObjIdComponent())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void ObjIdComponent() : {/*@bgen(jjtree) ObjIdComponent */
  ASTObjIdComponent jjtn000 = new ASTObjIdComponent(JJTOBJIDCOMPONENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ObjIdComponent */
  try {
/*@egen*/ 
  ( NumberForm() | NameAndNumberForm())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void NumberForm() : {/*@bgen(jjtree) NumberForm */
  ASTNumberForm jjtn000 = new ASTNumberForm(JJTNUMBERFORM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) NumberForm */
   try {
/*@egen*/ 
   number()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void NameAndNumberForm() : {/*@bgen(jjtree) NameAndNumberForm */
  ASTNameAndNumberForm jjtn000 = new ASTNameAndNumberForm(JJTNAMEANDNUMBERFORM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) NameAndNumberForm */
  try {
/*@egen*/ 
  identifier() [<LEFTPAREN_TKN> (NumberForm() | DefinedValue()) <RIGHTPAREN_TKN>]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void BinaryString() : {/*@bgen(jjtree) BinaryString */
    ASTBinaryString jjtn000 = new ASTBinaryString(JJTBINARYSTRING);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) BinaryString */
   try {
/*@egen*/ 
   t = <BSTRING_TKN>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void HexString() : {/*@bgen(jjtree) HexString */
    ASTHexString jjtn000 = new ASTHexString(JJTHEXSTRING);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) HexString */
   try {
/*@egen*/ 
   t = <HSTRING_TKN>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void CharString() : {/*@bgen(jjtree) CharString */
    ASTCharString jjtn000 = new ASTCharString(JJTCHARSTRING);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) CharString */
   try {
/*@egen*/ 
   t = <CSTRING_TKN>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void number() : {/*@bgen(jjtree) number */
    ASTnumber jjtn000 = new ASTnumber(JJTNUMBER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) number */
     try {
/*@egen*/ 
     t = <PLUS_NUMBER_TKN>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void identifier() : {/*@bgen(jjtree) identifier */
    ASTidentifier jjtn000 = new ASTidentifier(JJTIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) identifier */
   try {
/*@egen*/ 
   (<IMPLIED_TKN>)? t = <LCASEFIRST_IDENT_TKN>/*@bgen(jjtree)*/
                                               {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                               }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void modulereference() : {/*@bgen(jjtree) modulereference */
    ASTmodulereference jjtn000 = new ASTmodulereference(JJTMODULEREFERENCE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) modulereference */
   try {
/*@egen*/ 
   t = <UCASEFIRST_IDENT_TKN>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void typereference() : {/*@bgen(jjtree) typereference */
    ASTtypereference jjtn000 = new ASTtypereference(JJTTYPEREFERENCE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) typereference */
   try {
/*@egen*/ 
   t = <UCASEFIRST_IDENT_TKN>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void TextualConventionMacroType() : {/*@bgen(jjtree) TextualConventionMacroType */
  ASTTextualConventionMacroType jjtn000 = new ASTTextualConventionMacroType(JJTTEXTUALCONVENTIONMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TextualConventionMacroType */
   try {
/*@egen*/
   <TC_TKN>
        [SnmpDisplayHintPart()]
        SnmpStatus()
        [SnmpDescrPart()]
        [SnmpReferencePart()]
        SnmpSyntaxPart()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void ModuleIdentityMacroType() : {/*@bgen(jjtree) ModuleIdentityMacroType */
  ASTModuleIdentityMacroType jjtn000 = new ASTModuleIdentityMacroType(JJTMODULEIDENTITYMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModuleIdentityMacroType */
   try {
/*@egen*/
   <MI_TKN>
      [SnmpDisplayHintPart()]
      [SnmpSubjectCategoriesPart()]
      [SnmpLastUpdatedPart()]
      [SnmpOrganizationPart()]
      [SnmpContactInfoPart()]
      [SnmpDescrPart()] 
      (SnmpRevisionPart()
       SnmpDescrPart())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void NotificationTypeMacroType() : {/*@bgen(jjtree) NotificationTypeMacroType */
  ASTNotificationTypeMacroType jjtn000 = new ASTNotificationTypeMacroType(JJTNOTIFICATIONTYPEMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NotificationTypeMacroType */
   try {
/*@egen*/
   <NT_TKN>
      [SnmpDisplayHintPart()]
      [SnmpObjectsPart()]
      SnmpStatus()
      [SnmpDescrPart()] 
      [SnmpReferencePart()]/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void NotificationGroupMacroType() : {/*@bgen(jjtree) NotificationGroupMacroType */
  ASTNotificationGroupMacroType jjtn000 = new ASTNotificationGroupMacroType(JJTNOTIFICATIONGROUPMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NotificationGroupMacroType */
   try {
/*@egen*/
   <NG_TKN>
      [SnmpDisplayHintPart()]
      SnmpNitificationsPart()
      SnmpStatus()
      [SnmpDescrPart()]/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void ModuleComplianceMacroType() : {/*@bgen(jjtree) ModuleComplianceMacroType */
  ASTModuleComplianceMacroType jjtn000 = new ASTModuleComplianceMacroType(JJTMODULECOMPLIANCEMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModuleComplianceMacroType */
   try {
/*@egen*/
   <MC_TKN>
      [SnmpDisplayHintPart()]
      SnmpStatus()
      [SnmpDescrPart()] 
    (
      <MODULE_TKN> [modulereference()]
      [SnmpMandatoryGroupsPart()]
      ( (SnmpGroupPart()|SnmpObjectPart())
         [SnmpSyntaxPart()]
         [SnmpWriteSyntaxPart()]
         [SnmpAccess()]
         [SnmpDescrPart()])*
    )+/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void ObjecGroupMacroType() : {/*@bgen(jjtree) ObjecGroupMacroType */
  ASTObjecGroupMacroType jjtn000 = new ASTObjecGroupMacroType(JJTOBJECGROUPMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ObjecGroupMacroType */
   try {
/*@egen*/ 
   <OG_TKN>
      [SnmpDisplayHintPart()]
      SnmpObjectsPart()
      SnmpStatus()
      [SnmpDescrPart()] 
      [SnmpReferencePart()]/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void ObjecIdentityMacroType() : {/*@bgen(jjtree) ObjecIdentityMacroType */
  ASTObjecIdentityMacroType jjtn000 = new ASTObjecIdentityMacroType(JJTOBJECIDENTITYMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ObjecIdentityMacroType */
   try {
/*@egen*/ 
   <OI_TKN>
      [SnmpDisplayHintPart()]
      SnmpStatus()
      [SnmpDescrPart()] 
      [SnmpReferencePart()]/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void TrapTypeMacroType() : {/*@bgen(jjtree) TrapTypeMacroType */
  ASTTrapTypeMacroType jjtn000 = new ASTTrapTypeMacroType(JJTTRAPTYPEMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) TrapTypeMacroType */
   try {
/*@egen*/ 
   <TT_TKN>
      [SnmpDisplayHintPart()]
      SnmpEnterprisePart()
      SnmpVariablesPart()
      [SnmpDescrPart()]/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void AgentCapabilitiesMacroType() : {/*@bgen(jjtree) AgentCapabilitiesMacroType */
  ASTAgentCapabilitiesMacroType jjtn000 = new ASTAgentCapabilitiesMacroType(JJTAGENTCAPABILITIESMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) AgentCapabilitiesMacroType */
   try {
/*@egen*/ 
   <AC_TKN>
      [SnmpDisplayHintPart()]
      SnmpProductReleasePart()
      SnmpStatus()
      [SnmpDescrPart()]
      (SnmpSupportsPart()
       SnmpIncludesPart()
       (SnmpValiationPart())*)+/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}


void ObjectTypeMacroType() : {/*@bgen(jjtree) ObjectTypeMacroType */
  ASTObjectTypeMacroType jjtn000 = new ASTObjectTypeMacroType(JJTOBJECTTYPEMACROTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ObjectTypeMacroType */
   try {
/*@egen*/ 
   <OBJECTTYPE_TKN>
      SnmpSyntaxPart()
      [SnmpUnitsPart()]
      [SnmpTagPart()]
      [SnmpReferencesPart()]
      [SnmpAccess()]
      SnmpStatus()
      [SnmpDescrPart()]
      [SnmpReferencePart()] 
      [SnmpIndexPart()]
      [SnmpExtendsPart()]
      [SnmpUniquenessPart()]
      [SnmpDefValPart()]
      [SnmpAugmentsPart()]
      [SnmpInstallErrorsPart()]/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void SnmpDisplayHintPart() : {/*@bgen(jjtree) SnmpDisplayHintPart */
    ASTSnmpDisplayHintPart jjtn000 = new ASTSnmpDisplayHintPart(JJTSNMPDISPLAYHINTPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) SnmpDisplayHintPart */
   try {
/*@egen*/ 
   <DHINT> t = <CSTRING_TKN>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void SnmpObjectsPart() : {/*@bgen(jjtree) SnmpObjectsPart */
  ASTSnmpObjectsPart jjtn000 = new ASTSnmpObjectsPart(JJTSNMPOBJECTSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpObjectsPart */
   try {
/*@egen*/ 
   <OBJECTS_TKN> <LEFTBRACE_TKN> TypeOrValueList() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SnmpNitificationsPart() : {/*@bgen(jjtree) SnmpNitificationsPart */
  ASTSnmpNitificationsPart jjtn000 = new ASTSnmpNitificationsPart(JJTSNMPNITIFICATIONSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpNitificationsPart */
   try {
/*@egen*/ 
   <NOTIFICATIONS_TKN> <LEFTBRACE_TKN> TypeOrValueList() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SnmpStatus() : {/*@bgen(jjtree) SnmpStatus */
  ASTSnmpStatus jjtn000 = new ASTSnmpStatus(JJTSNMPSTATUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpStatus */
   try {
/*@egen*/ 
   <STATUS_TKN> identifier()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SnmpAccess() : {/*@bgen(jjtree) SnmpAccess */
  ASTSnmpAccess jjtn000 = new ASTSnmpAccess(JJTSNMPACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpAccess */
   try {
/*@egen*/ 
   <ACCESS_TKN> identifier()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SnmpDescrPart() : {/*@bgen(jjtree) SnmpDescrPart */
    ASTSnmpDescrPart jjtn000 = new ASTSnmpDescrPart(JJTSNMPDESCRPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) SnmpDescrPart */
   try {
/*@egen*/ 
   <DESCRIPTION_TKN> t = <CSTRING_TKN>/*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                       }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void SnmpReferencePart() : {/*@bgen(jjtree) SnmpReferencePart */
    ASTSnmpReferencePart jjtn000 = new ASTSnmpReferencePart(JJTSNMPREFERENCEPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) SnmpReferencePart */
   try {
/*@egen*/ 
   <REFERENCE_TKN> t = <CSTRING_TKN>/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void SnmpIndexPart() : {/*@bgen(jjtree) SnmpIndexPart */
  ASTSnmpIndexPart jjtn000 = new ASTSnmpIndexPart(JJTSNMPINDEXPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpIndexPart */
   try {
/*@egen*/ 
   <INDEX_TKN> <LEFTBRACE_TKN> TypeOrValueList() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SnmpExtendsPart() : {/*@bgen(jjtree) SnmpExtendsPart */
  ASTSnmpExtendsPart jjtn000 = new ASTSnmpExtendsPart(JJTSNMPEXTENDSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpExtendsPart */
   try {
/*@egen*/ 
   <EXTENDS_TKN> <LEFTBRACE_TKN> TypeOrValueList() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}
void SnmpUniquenessPart() : {/*@bgen(jjtree) SnmpUniquenessPart */
  ASTSnmpUniquenessPart jjtn000 = new ASTSnmpUniquenessPart(JJTSNMPUNIQUENESSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpUniquenessPart */
   try {
/*@egen*/ 
   <UNIQUENESS_TKN> <LEFTBRACE_TKN> [TypeOrValueList()] <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}
void TypeOrValueList() : {/*@bgen(jjtree) TypeOrValueList */
  ASTTypeOrValueList jjtn000 = new ASTTypeOrValueList(JJTTYPEORVALUELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) TypeOrValueList */
  try {
/*@egen*/ 
  TypeOrValue() (<COMMA_TKN> TypeOrValue())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void TypeOrValue() : {/*@bgen(jjtree) TypeOrValue */
  ASTTypeOrValue jjtn000 = new ASTTypeOrValue(JJTTYPEORVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) TypeOrValue */
  try {
/*@egen*/ 
  LOOKAHEAD(3) Type() | Value()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void SnmpDefValPart() : {/*@bgen(jjtree) SnmpDefValPart */
  ASTSnmpDefValPart jjtn000 = new ASTSnmpDefValPart(JJTSNMPDEFVALPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpDefValPart */
   try {
/*@egen*/ 
   <DEFVAL_TKN> <LEFTBRACE_TKN> SnmpDefValSubPart() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void SnmpDefValSubPart() : {/*@bgen(jjtree) SnmpDefValSubPart */
  ASTSnmpDefValSubPart jjtn000 = new ASTSnmpDefValSubPart(JJTSNMPDEFVALSUBPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpDefValSubPart */
  try {
/*@egen*/ 
  LOOKAHEAD(2) <LEFTBRACE_TKN> SnmpDefValSubSubPart() <RIGHTBRACE_TKN> 
  | Value()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void SnmpDefValSubSubPart() : {/*@bgen(jjtree) SnmpDefValSubSubPart */
  ASTSnmpDefValSubSubPart jjtn000 = new ASTSnmpDefValSubSubPart(JJTSNMPDEFVALSUBSUBPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpDefValSubSubPart */
   try {
/*@egen*/ 
   SnmpDefValSubSubSubPart() (<COMMA_TKN> SnmpDefValSubSubSubPart())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void SnmpDefValSubSubSubPart() : {/*@bgen(jjtree) SnmpDefValSubSubSubPart */
  ASTSnmpDefValSubSubSubPart jjtn000 = new ASTSnmpDefValSubSubSubPart(JJTSNMPDEFVALSUBSUBSUBPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpDefValSubSubSubPart */
   try {
/*@egen*/
   Value() [Value()]/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void SnmpAugmentsPart() : {/*@bgen(jjtree) SnmpAugmentsPart */
  ASTSnmpAugmentsPart jjtn000 = new ASTSnmpAugmentsPart(JJTSNMPAUGMENTSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpAugmentsPart */
   try {
/*@egen*/ 
   <AUGMENTS_TKN> <LEFTBRACE_TKN> Value() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void SnmpInstallErrorsPart() : {/*@bgen(jjtree) SnmpInstallErrorsPart */
  ASTSnmpInstallErrorsPart jjtn000 = new ASTSnmpInstallErrorsPart(JJTSNMPINSTALLERRORSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpInstallErrorsPart */
   try {
/*@egen*/ 
   <INSTALL_ERRORS_TKN> <LEFTBRACE_TKN> NamedNumberList() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void SnmpSubjectCategoriesPart() : {/*@bgen(jjtree) SnmpSubjectCategoriesPart */
  ASTSnmpSubjectCategoriesPart jjtn000 = new ASTSnmpSubjectCategoriesPart(JJTSNMPSUBJECTCATEGORIESPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpSubjectCategoriesPart */
   try {
/*@egen*/ 
   <SUBJECT_CATEGORIES_TKN> <LEFTBRACE_TKN> NameAndNumberForm() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void SnmpLastUpdatedPart() : {/*@bgen(jjtree) SnmpLastUpdatedPart */
    ASTSnmpLastUpdatedPart jjtn000 = new ASTSnmpLastUpdatedPart(JJTSNMPLASTUPDATEDPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) SnmpLastUpdatedPart */
   try {
/*@egen*/ 
   <LAST_UPDATED_TKN> t = <CSTRING_TKN>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void SnmpOrganizationPart() : {/*@bgen(jjtree) SnmpOrganizationPart */
    ASTSnmpOrganizationPart jjtn000 = new ASTSnmpOrganizationPart(JJTSNMPORGANIZATIONPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) SnmpOrganizationPart */
   try {
/*@egen*/ 
   <ORGANIZATION_TKN> t = <CSTRING_TKN>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void SnmpContactInfoPart() : {/*@bgen(jjtree) SnmpContactInfoPart */
    ASTSnmpContactInfoPart jjtn000 = new ASTSnmpContactInfoPart(JJTSNMPCONTACTINFOPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) SnmpContactInfoPart */
   try {
/*@egen*/ 
   <CONTACT_INFO_TKN> t = <CSTRING_TKN>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void SnmpRevisionPart() : {/*@bgen(jjtree) SnmpRevisionPart */
    ASTSnmpRevisionPart jjtn000 = new ASTSnmpRevisionPart(JJTSNMPREVISIONPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) SnmpRevisionPart */
   try {
/*@egen*/ 
   <REVISION_TKN> t = <CSTRING_TKN>/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void SnmpReferencesPart() : {/*@bgen(jjtree) SnmpReferencesPart */
  ASTSnmpReferencesPart jjtn000 = new ASTSnmpReferencesPart(JJTSNMPREFERENCESPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpReferencesPart */
   try {
/*@egen*/ 
   <REFERENCES_TKN> <LEFTBRACE_TKN> TypeOrValueList() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void SnmpSyntaxPart() : {/*@bgen(jjtree) SnmpSyntaxPart */
  ASTSnmpSyntaxPart jjtn000 = new ASTSnmpSyntaxPart(JJTSNMPSYNTAXPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpSyntaxPart */
   try {
/*@egen*/ 
   <SYNTAX_TKN> Type()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void SnmpWriteSyntaxPart() : {/*@bgen(jjtree) SnmpWriteSyntaxPart */
  ASTSnmpWriteSyntaxPart jjtn000 = new ASTSnmpWriteSyntaxPart(JJTSNMPWRITESYNTAXPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpWriteSyntaxPart */
   try {
/*@egen*/ 
   <WRITE_SYNTAX_TKN> Type()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void SnmpEnterprisePart() : {/*@bgen(jjtree) SnmpEnterprisePart */
  ASTSnmpEnterprisePart jjtn000 = new ASTSnmpEnterprisePart(JJTSNMPENTERPRISEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpEnterprisePart */
   try {
/*@egen*/ 
   <ENTERPRISE_TKN> identifier()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}
void SnmpVariablesPart() : {/*@bgen(jjtree) SnmpVariablesPart */
  ASTSnmpVariablesPart jjtn000 = new ASTSnmpVariablesPart(JJTSNMPVARIABLESPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpVariablesPart */
   try {
/*@egen*/ 
   <VARIABLES_TKN> <LEFTBRACE_TKN> TypeOrValueList() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}
void SnmpUnitsPart() : {/*@bgen(jjtree) SnmpUnitsPart */
    ASTSnmpUnitsPart jjtn000 = new ASTSnmpUnitsPart(JJTSNMPUNITSPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) SnmpUnitsPart */
   try {
/*@egen*/ 
   <UNITS_TKN> t = <CSTRING_TKN>/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                 }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void SnmpTagPart() : {/*@bgen(jjtree) SnmpTagPart */
  ASTSnmpTagPart jjtn000 = new ASTSnmpTagPart(JJTSNMPTAGPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpTagPart */
   try {
/*@egen*/ 
   <TAG_TKN> <LEFTBRACE_TKN> TypeOrValueList() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void SnmpMandatoryGroupsPart() : {/*@bgen(jjtree) SnmpMandatoryGroupsPart */
  ASTSnmpMandatoryGroupsPart jjtn000 = new ASTSnmpMandatoryGroupsPart(JJTSNMPMANDATORYGROUPSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpMandatoryGroupsPart */
   try {
/*@egen*/ 
   <MANDATORY_GROUPS_TKN> <LEFTBRACE_TKN> TypeOrValueList() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}
void SnmpGroupPart() : {/*@bgen(jjtree) SnmpGroupPart */
  ASTSnmpGroupPart jjtn000 = new ASTSnmpGroupPart(JJTSNMPGROUPPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpGroupPart */
   try {
/*@egen*/ 
   <GROUP_TKN> Value()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void SnmpObjectPart() : {/*@bgen(jjtree) SnmpObjectPart */
  ASTSnmpObjectPart jjtn000 = new ASTSnmpObjectPart(JJTSNMPOBJECTPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpObjectPart */
   try {
/*@egen*/ 
   <OBJECT_TKN> Value()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void SnmpProductReleasePart() : {/*@bgen(jjtree) SnmpProductReleasePart */
    ASTSnmpProductReleasePart jjtn000 = new ASTSnmpProductReleasePart(JJTSNMPPRODUCTRELEASEPART);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) SnmpProductReleasePart */
   try {
/*@egen*/ 
   <PRODUCT_RELEASE_TKN> t = <CSTRING_TKN>/*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtc000 = false;
                                           }
/*@egen*/ { jjtn000.value = t;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void SnmpSupportsPart() : {/*@bgen(jjtree) SnmpSupportsPart */
  ASTSnmpSupportsPart jjtn000 = new ASTSnmpSupportsPart(JJTSNMPSUPPORTSPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpSupportsPart */
   try {
/*@egen*/ 
   <SUPPORTS_TKN> modulereference()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void SnmpIncludesPart() : {/*@bgen(jjtree) SnmpIncludesPart */
  ASTSnmpIncludesPart jjtn000 = new ASTSnmpIncludesPart(JJTSNMPINCLUDESPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpIncludesPart */
   try {
/*@egen*/ 
   <INCLUDES_TKN>  <LEFTBRACE_TKN> TypeOrValueList() <RIGHTBRACE_TKN>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}
void SnmpValiationPart() : {/*@bgen(jjtree) SnmpValiationPart */
  ASTSnmpValiationPart jjtn000 = new ASTSnmpValiationPart(JJTSNMPVALIATIONPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) SnmpValiationPart */
   try {
/*@egen*/ 
   <VARIATION_TKN> Value()
   [SnmpSyntaxPart()]
   [SnmpAccess()]
   [SnmpDescrPart()]/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
